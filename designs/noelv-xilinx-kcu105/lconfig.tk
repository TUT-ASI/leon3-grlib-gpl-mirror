# FILE: header.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Remove unused do_cmd function (part of the 2.0 sound support).
# - Arrange buttons in three columns for better screen fitting.
# - Add CONSTANT_Y, CONSTANT_M, CONSTANT_N for commands like:
#     dep_tristate 'foo' CONFIG_FOO m
#
# 23 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Shut vfix the hell up.
#
# 24 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Improve the exit message (Jeff Ronne).

#
# This is a handy replacement for ".widget cget" that requires neither tk4
# nor additional source code uglification.
#
proc cget { w option } {
	return "[lindex [$w configure $option] 4]"
}

#
# Function to compensate for broken config.in scripts like the sound driver,
# which make dependencies on variables that are never even conditionally
# defined.
#
proc vfix { var } {
	global $var
	if [ catch {eval concat $$var} ] {
		set $var 4
	}
}

#
# Constant values used by certain dep_tristate commands.
#
set CONSTANT_Y 1
set CONSTANT_M 2
set CONSTANT_N 0
set CONSTANT_E 4

#
# Create a "reference" object to steal colors from.
#
button .ref

#
# On monochrome displays, -disabledforeground is blank by default; that's
# bad.  Fill it with -foreground instead.
#
if { [cget .ref -disabledforeground] == "" } {
	.ref configure -disabledforeground [cget .ref -foreground]
}


#
# Define some macros we will need to parse the config.in file.
#

proc mainmenu_name { text } {
	wm title . "$text"
}

proc menu_option { w menu_num text } {
	global menus_per_column
	global processed_top_level
	set processed_top_level [expr $processed_top_level + 1]
	if { $processed_top_level <= $menus_per_column } then {
	    set myframe left
	} elseif { $processed_top_level <= [expr 2 * $menus_per_column] } then {
	    set myframe middle
	} else {
	    set myframe right
	} 
	button .f0.x$menu_num -anchor w -text "$text" \
	    -command "$w .$w \"$text\""
	pack .f0.x$menu_num -pady 0 -side top -fill x -in .f0.$myframe
}

proc load_configfile { w title func } {
	catch {destroy $w}
	toplevel $w -class Dialog
	global loadfile
	frame $w.x
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	label $w.x.l -text "Enter filename:" -relief raised
	entry $w.x.x -width 35 -relief sunken -borderwidth 2 \
		-textvariable loadfile
	pack $w.x.l $w.x.x -anchor w -side left
	pack $w.x -side top -pady 10
	wm title $w "$title" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "destroy $w; focus $oldFocus;$func .fileio"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

bind all <Alt-q> {maybe_exit .maybe}

proc maybe_exit { w } {
	catch {destroy $w}
	toplevel $w -class Dialog
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	message $w.m -width 400 -aspect 300 \
		-text "Changes will be lost.  Are you sure?" -relief flat
	pack  $w.m -pady 10 -side top -padx 10
	wm title $w "Are you sure?" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "exit 1"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
  	bind $w <Return> "exit 1"
    	bind $w <Escape> "destroy $w; focus $oldFocus"
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc read_config_file { w } {
	global loadfile
	if { [string length $loadfile] != 0 && [file readable $loadfile] == 1 } then {
		read_config $loadfile
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to read file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "Bummer" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc write_config_file  { w } {
	global loadfile
	if { [string length $loadfile] != 0 
    		&& ([file writable $loadfile] == 1 || ([file exists $loadfile] == 0 && [file writable [file dirname $loadfile]] == 1)) } then {
		writeconfig $loadfile .null
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to write file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "OK" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc read_config { filename } {
	set file1 [open $filename r]
	clear_choices
	while { [gets $file1 line] >= 0} {
		if [regexp {([0-9A-Za-z_]+)=([ynm])} $line foo var value] {
			if { $value == "y" } then { set cmd "global $var; set $var 1" }
			if { $value == "n" } then { set cmd "global $var; set $var 0" }
			if { $value == "m" } then { set cmd "global $var; set $var 2" }
			eval $cmd
		}
		if [regexp {# ([0-9A-Za-z_]+) is not set} $line foo var] {
			set cmd "global $var; set $var 0"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)=([0-9A-Fa-f]+)} $line foo var value] {
			set cmd "global $var; set $var $value"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)="([^"]*)"} $line foo var value] {
			set cmd "global $var; set $var \"$value\""
			eval $cmd
		}
	}
	close $file1
	update_choices
	update_mainmenu
}
proc write_comment { file1 file2 text } {
    	puts $file1 ""
	puts $file1 "#"
	puts $file1 "# $text"
	puts $file1 "#"
	puts $file2 "/*"
	puts $file2 " * $text"
	puts $file2 " */"
}

proc effective_dep { deplist } {
	global CONFIG_MODULES
	set depend 1
	foreach i $deplist {
		if {$i == 0} then {set depend 0}
		if {$i == 2 && $depend == 1} then {set depend 2}
	}
	if {$depend == 2 && $CONFIG_MODULES == 0} then {set depend 0}
	return $depend
}

proc sync_tristate { var dep } {
	global CONFIG_MODULES
	if {$dep == 0 && ($var == 1 || $var == 2)} then {
		set var 0
	} elseif {$dep == 2 && $var == 1} then {
		set var 2
	} elseif {$var == 2 && $CONFIG_MODULES == 0} then {
		if {$dep == 1} then {set var 1} else {set var 0}
	}
	return $var
}

proc sync_bool { var dep modset } {
	set var [sync_tristate $var $dep]
	if {$dep == 2 && $var == 2} then {
		set var $modset
	}
	return $var
}

proc write_tristate { file1 file2 varname variable deplist modset } {
	set variable [sync_tristate $variable [effective_dep $deplist]]
	if { $variable == 2 } \
		then { set variable $modset }
	if { $variable == 1 } \
		then { puts $file1 "$varname=y"; \
		       puts $file2 "#define $varname 1" } \
	elseif { $variable == 2 } \
		then { puts $file1 "$varname=m"; \
		       puts $file2 "#undef  $varname"; \
		       puts $file2 "#define ${varname}_MODULE 1" } \
	elseif { $variable == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else { \
	    puts stdout "ERROR - Attempting to write value for unconfigured variable ($varname)." \
	}
}

proc write_int { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts $file2 "#define $varname ($variable)"; \
	}
}

proc write_hex { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts -nonewline $file2 "#define $varname "; \
		puts $file2 [exec echo $variable | sed s/^0\[xX\]//]; \
	}
}

proc write_string { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=\"$variable\""; \
		puts $file2 "#define $varname \"$variable\""; \
	}
}

proc option_name {w mnum line text helpidx} {
	button $w.x$line.l -text "$text" -relief groove -anchor w
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
				-activeback [cget $w.x$line.l -bg]
	button $w.x$line.help -text "Help" -relief raised \
		-command "dohelp .dohelp $helpidx .menu$mnum"
	pack $w.x$line.help -side right -fill y
	pack $w.x$line.l -side right -fill both -expand on
}

proc toggle_switch2 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
#	radiobutton $w.x$line.m -text "-"  -variable $variable -value 2 \
#		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	pack $w.x$line.n $w.x$line.y -side right -fill y
}

proc toggle_switch3 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "m"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	global CONFIG_MODULES
	if {($CONFIG_MODULES == 0)} then {
		$w.x$line.m configure -state disabled
	}
	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc bool {w mnum line text variable} {
	toggle_switch2 $w $mnum $line $text $variable
#	$w.x$line.m configure -state disabled
	pack $w.x$line -anchor w -fill both -expand on
}

proc tristate {w mnum line text variable } {
	toggle_switch3 $w $mnum $line $text $variable
	pack $w.x$line -anchor w -fill both -expand on
}

proc dep_tristate {w mnum line text variable } {
	tristate $w $mnum $line $text $variable
}

proc dep_bool {w mnum line text variable } {
	bool $w $mnum $line $text $variable
}

proc int { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 11 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc hex { w mnum line text variable } {
	int $w $mnum $line $text $variable
}

proc istring { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc minimenu { w mnum line text variable helpidx } {
	frame $w.x$line
	menubutton $w.x$line.x -textvariable $variable -menu \
		$w.x$line.x.menu -relief raised \
		-anchor w
	option_name $w $mnum $line $text $helpidx
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc menusplit {w m n} {
	if { $n > 2 } then {
		update idletasks
		set menuoptsize [expr [$m yposition 2] - [$m yposition 1]]   
		set maxsize [winfo screenheight $w]
		set splitpoint [expr $maxsize * 4 / 5 / $menuoptsize - 1]
		for {set i [expr $splitpoint + 1]} {$i <= $n} {incr i $splitpoint} {
			$m entryconfigure $i -columnbreak 1
		}
	}
}

proc menutitle {text menu w} {
	wm title $w "$text"
}

proc submenu { w mnum line text subnum } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 9 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief raised -anchor w \
		-command "catch {destroy .menu$subnum}; menu$subnum .menu$subnum \"$text\""
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc comment {w mnum line text } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief groove -anchor w
	$w.x$line.m configure -activefore [cget $w.x$line.m -fg] \
		-activeback [cget $w.x$line.m -bg]
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc readhelp {tag fn}  {
	set message ""
	set b 0
	if { [file readable $fn] == 1} then {
		set fhandle [open $fn r]
		while {[gets $fhandle inline] >= 0} {
			if { $b == 0 } {
				if { [regexp $tag $inline ] } {
					set b 1
					set message "$inline:\n"
				}
			} else {
				if { [regexp {^[^ \t]} $inline]} {
					break
				}
				set message "$message\n$inline"
			}
		}
		close $fhandle
	}
	return $message
}

proc dohelp {w var parent}  {
	catch {destroy $w}
	toplevel $w -class Dialog

	set filefound 0
	set found 0
	set lineno 0

	if { [file readable config.help] == 1} then {
		set filefound 1
		# First escape sed regexp special characters in var:
		set var [exec echo "$var" | sed s/\[\]\[\/.^$*\]/\\\\&/g]
		# Now pick out right help text:
		set message [readhelp $var config.help]
		set found [expr [string length "$message"] > 0]
	}

	frame $w.f1
	pack $w.f1 -fill both -expand on

	# Do the OK button
	#
	set oldFocus [focus]
	frame $w.f2
	button $w.f2.ok -text "OK" \
		-width 10 -command "destroy $w; catch {focus $oldFocus}"
	pack $w.f2.ok -side bottom -pady 6 -anchor n
	pack $w.f2 -side bottom -padx 10 -anchor s

	scrollbar $w.f1.vscroll -command "$w.f1.canvas yview"
	pack $w.f1.vscroll -side right -fill y

	canvas $w.f1.canvas -relief flat -borderwidth 0 \
		-yscrollcommand "$w.f1.vscroll set"
	frame $w.f1.f
	pack $w.f1.canvas -side right -fill y -expand on

	if { $found == 0 } then {
		if { $filefound == 0 } then {
		message $w.f1.f.m -width 750 -aspect 300 -relief flat -text \
			"No help available - unable to open file config.help."
		} else {
		message $w.f1.f.m -width 400 -aspect 300 -relief flat -text \
			"No help available for $var"
		}
		label $w.f1.bm -bitmap error
		wm title $w "RTFM"
	} else {
		text $w.f1.f.m -width 73 -relief flat -wrap word
		$w.f1.f.m insert 0.0 $message
		$w.f1.f.m conf -state disabled -height [$w.f1.f.m index end]

		label $w.f1.bm -bitmap info
		wm title $w "Configuration help" 
	}
	pack $w.f1.f.m -side left
	pack $w.f1.bm $w.f1.f -side left -padx 10

	focus $w
	set winx [expr [winfo x $parent]+20]
	set winy [expr [winfo y $parent]+20]
	wm geometry $w +$winx+$winy
	set sizok [expr [winfo reqheight $w.f2.ok] + 12]
	set maxy [expr [winfo screenheight .] * 3 / 4]
	set canvtotal [winfo reqheight $w.f1.f.m]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy $canvtotal
	} else {
		set sizy [expr $maxy - $sizok]
	}
	$w.f1.canvas configure -height $sizy -width [winfo reqwidth $w.f1.f.m] \
		-scrollregion "0 0 [winfo reqwidth $w.f1.f.m] \
			[winfo reqheight $w.f1.f.m]"
	$w.f1.canvas create window 0 0 -anchor nw -window $w.f1.f
	update idletasks

	set maxy [winfo screenheight .]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy [expr $sizok + $canvtotal]
	} else {
		set sizy $maxy
	}
	wm maxsize $w [winfo width $w] $sizy
}

bind all <Alt-s> { catch {exec cp -f .config .config.old}; \
		writeconfig .config config.h; wrapup .wrap }

proc wrapup {w }  {
	catch {destroy $w}
	toplevel $w -class Dialog

	global CONFIG_MODVERSIONS; vfix CONFIG_MODVERSIONS
	message $w.m -width 460 -aspect 300 -relief raised -text \
		"End of design configuration. "
	label $w.bm -bitmap info
	pack $w.bm $w.m -pady 10 -side top -padx 10
	wm title $w "LEON build instructions" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" \
		-width 10 -command "exit 2"
	pack $w.f.back -side bottom -pady 10 -anchor s
	pack $w.f -pady 10 -side top -padx 10 -anchor s
	focus $w
        bind $w <Return> "exit 2"
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy

}

proc unregister_active {num} {
	global active_menus
	set index [lsearch -exact $active_menus $num]
	if {$index != -1} then {set active_menus [lreplace $active_menus $index $index]}
}

proc update_active {} {
	global active_menus total_menus
	set max 0
	if {[llength $active_menus] > 0} then {
		set max [lindex $active_menus end]
		update_define [toplevel_menu [lindex $active_menus 0]] $max 0
	}
	foreach i $active_menus {
		if {[winfo exists .menu$i] == 0} then {
			unregister_active $i
		} else {
			update_menu$i
		}
	}
	update_define [expr $max + 1] $total_menus 1
	update_mainmenu
}

proc configure_entry {w option items} {
	foreach i $items {
		$w.$i configure -state $option
	}
}

proc validate_int {name val default} {
	if {([exec echo $val | sed s/^-//g | tr -d \[:digit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc validate_hex {name val default} {
	if {([exec echo $val | tr -d \[:xdigit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc update_define {first last allow_update} {
	for {set i $first} {$i <= $last} {incr i} {
		update_define_menu$i
		if {$allow_update == 1} then update
	}
}

#
# Next set up the particulars for the top level menu, and define a few
# buttons which we will stick down at the bottom.
#

frame .f0 
frame .f0.left
frame .f0.middle
frame .f0.right

set active_menus [list]
set processed_top_level 0
set ARCH sparc
set menus_per_column 4
set total_menus 14

proc toplevel_menu {num} {
	if {$num == 4} then {return 3}
	if {$num == 5} then {return 3}
	if {$num == 10} then {return 9}
	if {$num == 11} then {return 10}
	if {$num == 12} then {return 9}
	if {$num == 13} then {return 9}
	return $num
}

mainmenu_name "NOELV Design Configuration"
menu_option menu1 1 "Synthesis      "
proc menu1 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 1}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 1]]
	message $w.m -width 400 -aspect 300 -text \
		"Synthesis      "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Synthesis      " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 1; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu2 .menu2 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu0 .menu0 \"$title\""
	$w.f.prev configure -state disabled
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	global tmpvar_0
	minimenu $w.config.f 1 0 "Target technology                           " tmpvar_0 CONFIG_SYN_INFERRED
	menu $w.config.f.x0.x.menu -tearoffcommand "menutitle \"Target technology                           \""
	$w.config.f.x0.x.menu add radiobutton -label "Inferred" -variable tmpvar_0 -value "Inferred" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Axcelerator" -variable tmpvar_0 -value "Actel-Axcelerator" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Axcelerator-DSP" -variable tmpvar_0 -value "Actel-Axcelerator-DSP" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Fusion" -variable tmpvar_0 -value "Actel-Fusion" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Proasic" -variable tmpvar_0 -value "Actel-Proasic" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-ProasicPlus" -variable tmpvar_0 -value "Actel-ProasicPlus" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Proasic3" -variable tmpvar_0 -value "Actel-Proasic3" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Proasic3E" -variable tmpvar_0 -value "Actel-Proasic3E" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-Proasic3L" -variable tmpvar_0 -value "Actel-Proasic3L" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-IGLOO/p/L" -variable tmpvar_0 -value "Actel-IGLOO/p/L" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-IGLOO2" -variable tmpvar_0 -value "Actel-IGLOO2" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-SmartFusion2" -variable tmpvar_0 -value "Actel-SmartFusion2" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-RTG4" -variable tmpvar_0 -value "Actel-RTG4" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-PolarFire" -variable tmpvar_0 -value "Actel-PolarFire" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Aeroflex-UT025CRH" -variable tmpvar_0 -value "Aeroflex-UT025CRH" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Aeroflex-UT130HBD" -variable tmpvar_0 -value "Aeroflex-UT130HBD" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Aeroflex-UT90NHBD" -variable tmpvar_0 -value "Aeroflex-UT90NHBD" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-CycloneIII" -variable tmpvar_0 -value "Altera-CycloneIII" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-Stratix" -variable tmpvar_0 -value "Altera-Stratix" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-StratixII" -variable tmpvar_0 -value "Altera-StratixII" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-StratixIII" -variable tmpvar_0 -value "Altera-StratixIII" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-StratixIV" -variable tmpvar_0 -value "Altera-StratixIV" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-StratixV" -variable tmpvar_0 -value "Altera-StratixV" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-Others" -variable tmpvar_0 -value "Altera-Others" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Atmel-ATC18" -variable tmpvar_0 -value "Atmel-ATC18" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Atmel-ATC18RHA" -variable tmpvar_0 -value "Atmel-ATC18RHA" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Custom1" -variable tmpvar_0 -value "Custom1" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "DARE" -variable tmpvar_0 -value "DARE" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "IBM-CMOS9SF" -variable tmpvar_0 -value "IBM-CMOS9SF" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "NanoXplore-BraveMed" -variable tmpvar_0 -value "NanoXplore-BraveMed" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Quicklogic-Eclipse" -variable tmpvar_0 -value "Quicklogic-Eclipse" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RH-LIB18T" -variable tmpvar_0 -value "RH-LIB18T" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RH-UMC" -variable tmpvar_0 -value "RH-UMC" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RHS65" -variable tmpvar_0 -value "RHS65" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "SAED32" -variable tmpvar_0 -value "SAED32" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "SMIC130" -variable tmpvar_0 -value "SMIC130" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "TM65Gplus" -variable tmpvar_0 -value "TM65Gplus" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "TSMC90" -variable tmpvar_0 -value "TSMC90" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "UMC180" -variable tmpvar_0 -value "UMC180" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Artix7" -variable tmpvar_0 -value "Xilinx-Artix7" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Kintex7" -variable tmpvar_0 -value "Xilinx-Kintex7" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-KintexUltra" -variable tmpvar_0 -value "Xilinx-KintexUltra" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Spartan3" -variable tmpvar_0 -value "Xilinx-Spartan3" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Spartan3E" -variable tmpvar_0 -value "Xilinx-Spartan3E" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Spartan6" -variable tmpvar_0 -value "Xilinx-Spartan6" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Virtex2" -variable tmpvar_0 -value "Xilinx-Virtex2" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Virtex4" -variable tmpvar_0 -value "Xilinx-Virtex4" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Virtex5" -variable tmpvar_0 -value "Xilinx-Virtex5" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Virtex6" -variable tmpvar_0 -value "Xilinx-Virtex6" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Virtex7" -variable tmpvar_0 -value "Xilinx-Virtex7" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-Zynq7000" -variable tmpvar_0 -value "Xilinx-Zynq7000" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 51
	global tmpvar_1
	minimenu $w.config.f 1 1 "Memory Library                           " tmpvar_1 CONFIG_MEM_INFERRED
	menu $w.config.f.x1.x.menu -tearoffcommand "menutitle \"Memory Library                           \""
	$w.config.f.x1.x.menu add radiobutton -label "Inferred" -variable tmpvar_1 -value "Inferred" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "UMC18" -variable tmpvar_1 -value "UMC18" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "RH-UMC" -variable tmpvar_1 -value "RH-UMC" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "SAED32" -variable tmpvar_1 -value "SAED32" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "DARE" -variable tmpvar_1 -value "DARE" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "RHS65" -variable tmpvar_1 -value "RHS65" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Artisan" -variable tmpvar_1 -value "Artisan" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Custom1" -variable tmpvar_1 -value "Custom1" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Virage" -variable tmpvar_1 -value "Virage" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Virage-TSMC90" -variable tmpvar_1 -value "Virage-TSMC90" -command "update_active"
	menusplit $w $w.config.f.x1.x.menu 10
	global tmpvar_2
	minimenu $w.config.f 1 2 "Transceiver type                           " tmpvar_2 CONFIG_TRANS_GTP0
	menu $w.config.f.x2.x.menu -tearoffcommand "menutitle \"Transceiver type                           \""
	$w.config.f.x2.x.menu add radiobutton -label "GTP0" -variable tmpvar_2 -value "GTP0" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "GTP1" -variable tmpvar_2 -value "GTP1" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "GTX0" -variable tmpvar_2 -value "GTX0" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "GTX1" -variable tmpvar_2 -value "GTX1" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "GTH0" -variable tmpvar_2 -value "GTH0" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "GTH1" -variable tmpvar_2 -value "GTH1" -command "update_active"
	menusplit $w $w.config.f.x2.x.menu 6
	bool $w.config.f 1 3 "Infer RAM" CONFIG_SYN_INFER_RAM
	bool $w.config.f 1 4 "Infer pads" CONFIG_SYN_INFER_PADS
	bool $w.config.f 1 5 "Disable asynchronous reset" CONFIG_SYN_NO_ASYNC
	bool $w.config.f 1 6 "Enable scan support       " CONFIG_SYN_SCAN



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu1 {} {
	global CONFIG_SYN_INFERRED
	global CONFIG_SYN_CUSTOM1
	global CONFIG_SYN_ATC18
	global CONFIG_SYN_TSMC90
	global CONFIG_SYN_UMC
	global CONFIG_SYN_RHUMC
	global CONFIG_SYN_DARE
	global CONFIG_SYN_SAED32
	global CONFIG_SYN_RHS65
	global CONFIG_SYN_ARTISAN
	if {($CONFIG_SYN_INFERRED == 1 || $CONFIG_SYN_CUSTOM1 == 1 || $CONFIG_SYN_ATC18 == 1 || $CONFIG_SYN_TSMC90 == 1 || $CONFIG_SYN_UMC == 1 || $CONFIG_SYN_RHUMC == 1 || $CONFIG_SYN_DARE == 1 || $CONFIG_SYN_SAED32 == 1 || $CONFIG_SYN_RHS65 == 1 || $CONFIG_SYN_ARTISAN == 1)} then {configure_entry .menu1.config.f.x1 normal {x l}} else {configure_entry .menu1.config.f.x1 disabled {x l}}
	global CONFIG_SYN_VIRTEX5
	global CONFIG_SYN_VIRTEX6
	global CONFIG_SYN_VIRTEX7
	if {($CONFIG_SYN_VIRTEX5 == 1 || $CONFIG_SYN_VIRTEX6 == 1 || $CONFIG_SYN_VIRTEX7 == 1)} then {configure_entry .menu1.config.f.x2 normal {x l}} else {configure_entry .menu1.config.f.x2 disabled {x l}}
	global CONFIG_SYN_INFER_RAM
	if {($CONFIG_SYN_INFERRED != 1)} then {
	configure_entry .menu1.config.f.x3 normal {n l y}} else {configure_entry .menu1.config.f.x3 disabled {y n l}}
	global CONFIG_SYN_INFER_PADS
	if {($CONFIG_SYN_INFERRED != 1)} then {
	configure_entry .menu1.config.f.x4 normal {n l y}} else {configure_entry .menu1.config.f.x4 disabled {y n l}}
}


proc update_define_menu1 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global tmpvar_0
	global CONFIG_SYN_INFERRED
	if {$tmpvar_0 == "Inferred"} then {set CONFIG_SYN_INFERRED 1} else {set CONFIG_SYN_INFERRED 0}
	global CONFIG_SYN_AXCEL
	if {$tmpvar_0 == "Actel-Axcelerator"} then {set CONFIG_SYN_AXCEL 1} else {set CONFIG_SYN_AXCEL 0}
	global CONFIG_SYN_AXDSP
	if {$tmpvar_0 == "Actel-Axcelerator-DSP"} then {set CONFIG_SYN_AXDSP 1} else {set CONFIG_SYN_AXDSP 0}
	global CONFIG_SYN_FUSION
	if {$tmpvar_0 == "Actel-Fusion"} then {set CONFIG_SYN_FUSION 1} else {set CONFIG_SYN_FUSION 0}
	global CONFIG_SYN_PROASIC
	if {$tmpvar_0 == "Actel-Proasic"} then {set CONFIG_SYN_PROASIC 1} else {set CONFIG_SYN_PROASIC 0}
	global CONFIG_SYN_PROASICPLUS
	if {$tmpvar_0 == "Actel-ProasicPlus"} then {set CONFIG_SYN_PROASICPLUS 1} else {set CONFIG_SYN_PROASICPLUS 0}
	global CONFIG_SYN_PROASIC3
	if {$tmpvar_0 == "Actel-Proasic3"} then {set CONFIG_SYN_PROASIC3 1} else {set CONFIG_SYN_PROASIC3 0}
	global CONFIG_SYN_PROASIC3E
	if {$tmpvar_0 == "Actel-Proasic3E"} then {set CONFIG_SYN_PROASIC3E 1} else {set CONFIG_SYN_PROASIC3E 0}
	global CONFIG_SYN_PROASIC3L
	if {$tmpvar_0 == "Actel-Proasic3L"} then {set CONFIG_SYN_PROASIC3L 1} else {set CONFIG_SYN_PROASIC3L 0}
	global CONFIG_SYN_IGLOO
	if {$tmpvar_0 == "Actel-IGLOO/p/L"} then {set CONFIG_SYN_IGLOO 1} else {set CONFIG_SYN_IGLOO 0}
	global CONFIG_SYN_IGLOO2
	if {$tmpvar_0 == "Actel-IGLOO2"} then {set CONFIG_SYN_IGLOO2 1} else {set CONFIG_SYN_IGLOO2 0}
	global CONFIG_SYN_SF2
	if {$tmpvar_0 == "Actel-SmartFusion2"} then {set CONFIG_SYN_SF2 1} else {set CONFIG_SYN_SF2 0}
	global CONFIG_SYN_RTG4
	if {$tmpvar_0 == "Actel-RTG4"} then {set CONFIG_SYN_RTG4 1} else {set CONFIG_SYN_RTG4 0}
	global CONFIG_SYN_POLARFIRE
	if {$tmpvar_0 == "Actel-PolarFire"} then {set CONFIG_SYN_POLARFIRE 1} else {set CONFIG_SYN_POLARFIRE 0}
	global CONFIG_SYN_UT025CRH
	if {$tmpvar_0 == "Aeroflex-UT025CRH"} then {set CONFIG_SYN_UT025CRH 1} else {set CONFIG_SYN_UT025CRH 0}
	global CONFIG_SYN_UT130HBD
	if {$tmpvar_0 == "Aeroflex-UT130HBD"} then {set CONFIG_SYN_UT130HBD 1} else {set CONFIG_SYN_UT130HBD 0}
	global CONFIG_SYN_UT90NHBD
	if {$tmpvar_0 == "Aeroflex-UT90NHBD"} then {set CONFIG_SYN_UT90NHBD 1} else {set CONFIG_SYN_UT90NHBD 0}
	global CONFIG_SYN_CYCLONEIII
	if {$tmpvar_0 == "Altera-CycloneIII"} then {set CONFIG_SYN_CYCLONEIII 1} else {set CONFIG_SYN_CYCLONEIII 0}
	global CONFIG_SYN_STRATIX
	if {$tmpvar_0 == "Altera-Stratix"} then {set CONFIG_SYN_STRATIX 1} else {set CONFIG_SYN_STRATIX 0}
	global CONFIG_SYN_STRATIXII
	if {$tmpvar_0 == "Altera-StratixII"} then {set CONFIG_SYN_STRATIXII 1} else {set CONFIG_SYN_STRATIXII 0}
	global CONFIG_SYN_STRATIXIII
	if {$tmpvar_0 == "Altera-StratixIII"} then {set CONFIG_SYN_STRATIXIII 1} else {set CONFIG_SYN_STRATIXIII 0}
	global CONFIG_SYN_STRATIXIV
	if {$tmpvar_0 == "Altera-StratixIV"} then {set CONFIG_SYN_STRATIXIV 1} else {set CONFIG_SYN_STRATIXIV 0}
	global CONFIG_SYN_STRATIXV
	if {$tmpvar_0 == "Altera-StratixV"} then {set CONFIG_SYN_STRATIXV 1} else {set CONFIG_SYN_STRATIXV 0}
	global CONFIG_SYN_ALTERA
	if {$tmpvar_0 == "Altera-Others"} then {set CONFIG_SYN_ALTERA 1} else {set CONFIG_SYN_ALTERA 0}
	global CONFIG_SYN_ATC18
	if {$tmpvar_0 == "Atmel-ATC18"} then {set CONFIG_SYN_ATC18 1} else {set CONFIG_SYN_ATC18 0}
	global CONFIG_SYN_ATC18RHA
	if {$tmpvar_0 == "Atmel-ATC18RHA"} then {set CONFIG_SYN_ATC18RHA 1} else {set CONFIG_SYN_ATC18RHA 0}
	global CONFIG_SYN_CUSTOM1
	if {$tmpvar_0 == "Custom1"} then {set CONFIG_SYN_CUSTOM1 1} else {set CONFIG_SYN_CUSTOM1 0}
	global CONFIG_SYN_DARE
	if {$tmpvar_0 == "DARE"} then {set CONFIG_SYN_DARE 1} else {set CONFIG_SYN_DARE 0}
	global CONFIG_SYN_CMOS9SF
	if {$tmpvar_0 == "IBM-CMOS9SF"} then {set CONFIG_SYN_CMOS9SF 1} else {set CONFIG_SYN_CMOS9SF 0}
	global CONFIG_SYN_BRAVEMED
	if {$tmpvar_0 == "NanoXplore-BraveMed"} then {set CONFIG_SYN_BRAVEMED 1} else {set CONFIG_SYN_BRAVEMED 0}
	global CONFIG_SYN_ECLIPSE
	if {$tmpvar_0 == "Quicklogic-Eclipse"} then {set CONFIG_SYN_ECLIPSE 1} else {set CONFIG_SYN_ECLIPSE 0}
	global CONFIG_SYN_RH_LIB18T
	if {$tmpvar_0 == "RH-LIB18T"} then {set CONFIG_SYN_RH_LIB18T 1} else {set CONFIG_SYN_RH_LIB18T 0}
	global CONFIG_SYN_RHUMC
	if {$tmpvar_0 == "RH-UMC"} then {set CONFIG_SYN_RHUMC 1} else {set CONFIG_SYN_RHUMC 0}
	global CONFIG_SYN_RHS65
	if {$tmpvar_0 == "RHS65"} then {set CONFIG_SYN_RHS65 1} else {set CONFIG_SYN_RHS65 0}
	global CONFIG_SYN_SAED32
	if {$tmpvar_0 == "SAED32"} then {set CONFIG_SYN_SAED32 1} else {set CONFIG_SYN_SAED32 0}
	global CONFIG_SYN_SMIC13
	if {$tmpvar_0 == "SMIC130"} then {set CONFIG_SYN_SMIC13 1} else {set CONFIG_SYN_SMIC13 0}
	global CONFIG_SYN_TM65GPLUS
	if {$tmpvar_0 == "TM65Gplus"} then {set CONFIG_SYN_TM65GPLUS 1} else {set CONFIG_SYN_TM65GPLUS 0}
	global CONFIG_SYN_TSMC90
	if {$tmpvar_0 == "TSMC90"} then {set CONFIG_SYN_TSMC90 1} else {set CONFIG_SYN_TSMC90 0}
	global CONFIG_SYN_UMC
	if {$tmpvar_0 == "UMC180"} then {set CONFIG_SYN_UMC 1} else {set CONFIG_SYN_UMC 0}
	global CONFIG_SYN_ARTIX7
	if {$tmpvar_0 == "Xilinx-Artix7"} then {set CONFIG_SYN_ARTIX7 1} else {set CONFIG_SYN_ARTIX7 0}
	global CONFIG_SYN_KINTEX7
	if {$tmpvar_0 == "Xilinx-Kintex7"} then {set CONFIG_SYN_KINTEX7 1} else {set CONFIG_SYN_KINTEX7 0}
	global CONFIG_SYN_KINTEXU
	if {$tmpvar_0 == "Xilinx-KintexUltra"} then {set CONFIG_SYN_KINTEXU 1} else {set CONFIG_SYN_KINTEXU 0}
	global CONFIG_SYN_SPARTAN3
	if {$tmpvar_0 == "Xilinx-Spartan3"} then {set CONFIG_SYN_SPARTAN3 1} else {set CONFIG_SYN_SPARTAN3 0}
	global CONFIG_SYN_SPARTAN3E
	if {$tmpvar_0 == "Xilinx-Spartan3E"} then {set CONFIG_SYN_SPARTAN3E 1} else {set CONFIG_SYN_SPARTAN3E 0}
	global CONFIG_SYN_SPARTAN6
	if {$tmpvar_0 == "Xilinx-Spartan6"} then {set CONFIG_SYN_SPARTAN6 1} else {set CONFIG_SYN_SPARTAN6 0}
	global CONFIG_SYN_VIRTEX2
	if {$tmpvar_0 == "Xilinx-Virtex2"} then {set CONFIG_SYN_VIRTEX2 1} else {set CONFIG_SYN_VIRTEX2 0}
	global CONFIG_SYN_VIRTEX4
	if {$tmpvar_0 == "Xilinx-Virtex4"} then {set CONFIG_SYN_VIRTEX4 1} else {set CONFIG_SYN_VIRTEX4 0}
	global CONFIG_SYN_VIRTEX5
	if {$tmpvar_0 == "Xilinx-Virtex5"} then {set CONFIG_SYN_VIRTEX5 1} else {set CONFIG_SYN_VIRTEX5 0}
	global CONFIG_SYN_VIRTEX6
	if {$tmpvar_0 == "Xilinx-Virtex6"} then {set CONFIG_SYN_VIRTEX6 1} else {set CONFIG_SYN_VIRTEX6 0}
	global CONFIG_SYN_VIRTEX7
	if {$tmpvar_0 == "Xilinx-Virtex7"} then {set CONFIG_SYN_VIRTEX7 1} else {set CONFIG_SYN_VIRTEX7 0}
	global CONFIG_SYN_ZYNQ7000
	if {$tmpvar_0 == "Xilinx-Zynq7000"} then {set CONFIG_SYN_ZYNQ7000 1} else {set CONFIG_SYN_ZYNQ7000 0}
	global tmpvar_1
	global CONFIG_MEM_INFERRED
	if {$tmpvar_1 == "Inferred"} then {set CONFIG_MEM_INFERRED 1} else {set CONFIG_MEM_INFERRED 0}
	global CONFIG_MEM_UMC
	if {$tmpvar_1 == "UMC18"} then {set CONFIG_MEM_UMC 1} else {set CONFIG_MEM_UMC 0}
	global CONFIG_MEM_RHUMC
	if {$tmpvar_1 == "RH-UMC"} then {set CONFIG_MEM_RHUMC 1} else {set CONFIG_MEM_RHUMC 0}
	global CONFIG_MEM_SAED32
	if {$tmpvar_1 == "SAED32"} then {set CONFIG_MEM_SAED32 1} else {set CONFIG_MEM_SAED32 0}
	global CONFIG_MEM_DARE
	if {$tmpvar_1 == "DARE"} then {set CONFIG_MEM_DARE 1} else {set CONFIG_MEM_DARE 0}
	global CONFIG_MEM_RHS65
	if {$tmpvar_1 == "RHS65"} then {set CONFIG_MEM_RHS65 1} else {set CONFIG_MEM_RHS65 0}
	global CONFIG_MEM_ARTISAN
	if {$tmpvar_1 == "Artisan"} then {set CONFIG_MEM_ARTISAN 1} else {set CONFIG_MEM_ARTISAN 0}
	global CONFIG_MEM_CUSTOM1
	if {$tmpvar_1 == "Custom1"} then {set CONFIG_MEM_CUSTOM1 1} else {set CONFIG_MEM_CUSTOM1 0}
	global CONFIG_MEM_VIRAGE
	if {$tmpvar_1 == "Virage"} then {set CONFIG_MEM_VIRAGE 1} else {set CONFIG_MEM_VIRAGE 0}
	global CONFIG_MEM_VIRAGE90
	if {$tmpvar_1 == "Virage-TSMC90"} then {set CONFIG_MEM_VIRAGE90 1} else {set CONFIG_MEM_VIRAGE90 0}
	global tmpvar_2
	global CONFIG_TRANS_GTP0
	if {$tmpvar_2 == "GTP0"} then {set CONFIG_TRANS_GTP0 1} else {set CONFIG_TRANS_GTP0 0}
	global CONFIG_TRANS_GTP1
	if {$tmpvar_2 == "GTP1"} then {set CONFIG_TRANS_GTP1 1} else {set CONFIG_TRANS_GTP1 0}
	global CONFIG_TRANS_GTX0
	if {$tmpvar_2 == "GTX0"} then {set CONFIG_TRANS_GTX0 1} else {set CONFIG_TRANS_GTX0 0}
	global CONFIG_TRANS_GTX1
	if {$tmpvar_2 == "GTX1"} then {set CONFIG_TRANS_GTX1 1} else {set CONFIG_TRANS_GTX1 0}
	global CONFIG_TRANS_GTH0
	if {$tmpvar_2 == "GTH0"} then {set CONFIG_TRANS_GTH0 1} else {set CONFIG_TRANS_GTH0 0}
	global CONFIG_TRANS_GTH1
	if {$tmpvar_2 == "GTH1"} then {set CONFIG_TRANS_GTH1 1} else {set CONFIG_TRANS_GTH1 0}
	global CONFIG_SYN_INFER_RAM
	if {($CONFIG_SYN_INFERRED != 1)} then {
	set CONFIG_SYN_INFER_RAM [expr $CONFIG_SYN_INFER_RAM&15]} else {set CONFIG_SYN_INFER_RAM [expr $CONFIG_SYN_INFER_RAM|16]}
	global CONFIG_SYN_INFER_PADS
	if {($CONFIG_SYN_INFERRED != 1)} then {
	set CONFIG_SYN_INFER_PADS [expr $CONFIG_SYN_INFER_PADS&15]} else {set CONFIG_SYN_INFER_PADS [expr $CONFIG_SYN_INFER_PADS|16]}
}


menu_option menu2 2 "Clock generation"
proc menu2 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 2}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 2]]
	message $w.m -width 400 -aspect 300 -text \
		"Clock generation"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Clock generation" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 2; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu3 .menu3 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	global tmpvar_3
	minimenu $w.config.f 2 0 "Clock generator                     " tmpvar_3 CONFIG_CLK_INFERRED
	menu $w.config.f.x0.x.menu -tearoffcommand "menutitle \"Clock generator                     \""
	$w.config.f.x0.x.menu add radiobutton -label "Inferred" -variable tmpvar_3 -value "Inferred" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Actel-HCLKBUF" -variable tmpvar_3 -value "Actel-HCLKBUF" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Aeroflex-UT130HBD" -variable tmpvar_3 -value "Aeroflex-UT130HBD" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Altera-ALTPLL" -variable tmpvar_3 -value "Altera-ALTPLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "NanoXplore-NXPLL" -variable tmpvar_3 -value "NanoXplore-NXPLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Proasic3-PLL" -variable tmpvar_3 -value "Proasic3-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Proasic3E-PLL" -variable tmpvar_3 -value "Proasic3E-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Proasic3L-PLL" -variable tmpvar_3 -value "Proasic3L-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Fusion-PLL" -variable tmpvar_3 -value "Fusion-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RH-LIB18T-PLL" -variable tmpvar_3 -value "RH-LIB18T-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RHUMC-PLL" -variable tmpvar_3 -value "RHUMC-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "DARE-PLL" -variable tmpvar_3 -value "DARE-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "SAED32-PLL" -variable tmpvar_3 -value "SAED32-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "EASIC45-PLL" -variable tmpvar_3 -value "EASIC45-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "RHS65-PLL" -variable tmpvar_3 -value "RHS65-PLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-PLLE2" -variable tmpvar_3 -value "Xilinx-PLLE2" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-CLKDLL" -variable tmpvar_3 -value "Xilinx-CLKDLL" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "Xilinx-DCM" -variable tmpvar_3 -value "Xilinx-DCM" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 18
	int $w.config.f 2 1 "Clock multiplication factor (allowed values are tech dependent)" CONFIG_CLK_MUL
	int $w.config.f 2 2 "Clock division factor (allowed values are tech dependent)" CONFIG_CLK_DIV
	int $w.config.f 2 3 "Outout division factor (0 - 32, see help)" CONFIG_OCLK_DIV
	int $w.config.f 2 4 "Outout division factor, 2nd clk (0 - 32, see help)" CONFIG_OCLKB_DIV
	int $w.config.f 2 5 "Outout division factor, 3rd clk (0 - 32, see help)" CONFIG_OCLKC_DIV
	bool $w.config.f 2 6 "Enable Xilinx CLKDLL for PCI clock" CONFIG_PCI_CLKDLL
	bool $w.config.f 2 7 "Disable external feedback for SDRAM clock" CONFIG_CLK_NOFB
	bool $w.config.f 2 8 "Use PCI clock as system clock" CONFIG_PCI_SYSCLK



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu2 {} {
	global CONFIG_CLK_DCM
	global CONFIG_CLK_ALTDLL
	global CONFIG_CLK_LATDLL
	global CONFIG_CLK_PRO3PLL
	global CONFIG_CLK_PRO3EPLL
	global CONFIG_CLK_PRO3LPLL
	global CONFIG_CLK_CLKDLL
	global CONFIG_CLK_LIB18T
	global CONFIG_CLK_FUSPLL
	global CONFIG_CLK_CLKPLLE2
	global CONFIG_CLK_BRAVEMED
	global CONFIG_CLK_MUL
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {.menu2.config.f.x1.x configure -state normal -foreground [ cget .ref -foreground ]; .menu2.config.f.x1.l configure -state normal; } else {.menu2.config.f.x1.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu2.config.f.x1.l configure -state disabled}
	global CONFIG_CLK_DIV
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1) && ($CONFIG_CLK_BRAVEMED != 1)} then {.menu2.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu2.config.f.x2.l configure -state normal; } else {.menu2.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu2.config.f.x2.l configure -state disabled}
	global CONFIG_OCLK_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {.menu2.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu2.config.f.x3.l configure -state normal; } else {.menu2.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu2.config.f.x3.l configure -state disabled}
	global CONFIG_OCLKB_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {.menu2.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu2.config.f.x4.l configure -state normal; } else {.menu2.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu2.config.f.x4.l configure -state disabled}
	global CONFIG_OCLKC_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {.menu2.config.f.x5.x configure -state normal -foreground [ cget .ref -foreground ]; .menu2.config.f.x5.l configure -state normal; } else {.menu2.config.f.x5.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu2.config.f.x5.l configure -state disabled}
	global CONFIG_PCI_CLKDLL
	if {($CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_DCM == 1)} then {
	configure_entry .menu2.config.f.x6 normal {n l y}} else {configure_entry .menu2.config.f.x6 disabled {y n l}}
	global CONFIG_CLK_NOFB
	if {($CONFIG_CLK_DCM == 1)} then {
	configure_entry .menu2.config.f.x7 normal {n l y}} else {configure_entry .menu2.config.f.x7 disabled {y n l}}
	global CONFIG_PCI_ENABLE
	global CONFIG_PCI_SYSCLK
	if {($CONFIG_PCI_ENABLE != 1)} then {
	configure_entry .menu2.config.f.x8 normal {n l y}} else {configure_entry .menu2.config.f.x8 disabled {y n l}}
}


proc update_define_menu2 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global tmpvar_3
	global CONFIG_CLK_INFERRED
	if {$tmpvar_3 == "Inferred"} then {set CONFIG_CLK_INFERRED 1} else {set CONFIG_CLK_INFERRED 0}
	global CONFIG_CLK_HCLKBUF
	if {$tmpvar_3 == "Actel-HCLKBUF"} then {set CONFIG_CLK_HCLKBUF 1} else {set CONFIG_CLK_HCLKBUF 0}
	global CONFIG_CLK_UT130HBD
	if {$tmpvar_3 == "Aeroflex-UT130HBD"} then {set CONFIG_CLK_UT130HBD 1} else {set CONFIG_CLK_UT130HBD 0}
	global CONFIG_CLK_ALTDLL
	if {$tmpvar_3 == "Altera-ALTPLL"} then {set CONFIG_CLK_ALTDLL 1} else {set CONFIG_CLK_ALTDLL 0}
	global CONFIG_CLK_BRAVEMED
	if {$tmpvar_3 == "NanoXplore-NXPLL"} then {set CONFIG_CLK_BRAVEMED 1} else {set CONFIG_CLK_BRAVEMED 0}
	global CONFIG_CLK_PRO3PLL
	if {$tmpvar_3 == "Proasic3-PLL"} then {set CONFIG_CLK_PRO3PLL 1} else {set CONFIG_CLK_PRO3PLL 0}
	global CONFIG_CLK_PRO3EPLL
	if {$tmpvar_3 == "Proasic3E-PLL"} then {set CONFIG_CLK_PRO3EPLL 1} else {set CONFIG_CLK_PRO3EPLL 0}
	global CONFIG_CLK_PRO3LPLL
	if {$tmpvar_3 == "Proasic3L-PLL"} then {set CONFIG_CLK_PRO3LPLL 1} else {set CONFIG_CLK_PRO3LPLL 0}
	global CONFIG_CLK_FUSPLL
	if {$tmpvar_3 == "Fusion-PLL"} then {set CONFIG_CLK_FUSPLL 1} else {set CONFIG_CLK_FUSPLL 0}
	global CONFIG_CLK_LIB18T
	if {$tmpvar_3 == "RH-LIB18T-PLL"} then {set CONFIG_CLK_LIB18T 1} else {set CONFIG_CLK_LIB18T 0}
	global CONFIG_CLK_RHUMC
	if {$tmpvar_3 == "RHUMC-PLL"} then {set CONFIG_CLK_RHUMC 1} else {set CONFIG_CLK_RHUMC 0}
	global CONFIG_CLK_DARE
	if {$tmpvar_3 == "DARE-PLL"} then {set CONFIG_CLK_DARE 1} else {set CONFIG_CLK_DARE 0}
	global CONFIG_CLK_SAED32
	if {$tmpvar_3 == "SAED32-PLL"} then {set CONFIG_CLK_SAED32 1} else {set CONFIG_CLK_SAED32 0}
	global CONFIG_CLK_EASIC45
	if {$tmpvar_3 == "EASIC45-PLL"} then {set CONFIG_CLK_EASIC45 1} else {set CONFIG_CLK_EASIC45 0}
	global CONFIG_CLK_RHS65
	if {$tmpvar_3 == "RHS65-PLL"} then {set CONFIG_CLK_RHS65 1} else {set CONFIG_CLK_RHS65 0}
	global CONFIG_CLK_CLKPLLE2
	if {$tmpvar_3 == "Xilinx-PLLE2"} then {set CONFIG_CLK_CLKPLLE2 1} else {set CONFIG_CLK_CLKPLLE2 0}
	global CONFIG_CLK_CLKDLL
	if {$tmpvar_3 == "Xilinx-CLKDLL"} then {set CONFIG_CLK_CLKDLL 1} else {set CONFIG_CLK_CLKDLL 0}
	global CONFIG_CLK_DCM
	if {$tmpvar_3 == "Xilinx-DCM"} then {set CONFIG_CLK_DCM 1} else {set CONFIG_CLK_DCM 0}
	global CONFIG_CLK_LATDLL
	global CONFIG_CLK_MUL
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {validate_int CONFIG_CLK_MUL "$CONFIG_CLK_MUL" 2}
	global CONFIG_CLK_DIV
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1) && ($CONFIG_CLK_BRAVEMED != 1)} then {validate_int CONFIG_CLK_DIV "$CONFIG_CLK_DIV" 2}
	global CONFIG_OCLK_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {validate_int CONFIG_OCLK_DIV "$CONFIG_OCLK_DIV" 1}
	global CONFIG_OCLKB_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {validate_int CONFIG_OCLKB_DIV "$CONFIG_OCLKB_DIV" 0}
	global CONFIG_OCLKC_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {validate_int CONFIG_OCLKC_DIV "$CONFIG_OCLKC_DIV" 0}
	global CONFIG_PCI_CLKDLL
	if {($CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_DCM == 1)} then {
	set CONFIG_PCI_CLKDLL [expr $CONFIG_PCI_CLKDLL&15]} else {set CONFIG_PCI_CLKDLL [expr $CONFIG_PCI_CLKDLL|16]}
	global CONFIG_CLK_NOFB
	if {($CONFIG_CLK_DCM == 1)} then {
	set CONFIG_CLK_NOFB [expr $CONFIG_CLK_NOFB&15]} else {set CONFIG_CLK_NOFB [expr $CONFIG_CLK_NOFB|16]}
	global CONFIG_PCI_ENABLE
	global CONFIG_PCI_SYSCLK
	if {($CONFIG_PCI_ENABLE != 1)} then {
	set CONFIG_PCI_SYSCLK [expr $CONFIG_PCI_SYSCLK&15]} else {set CONFIG_PCI_SYSCLK [expr $CONFIG_PCI_SYSCLK|16]}
}


menu_option menu3 3 "Processor            "
proc menu3 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 3}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 3]]
	message $w.m -width 400 -aspect 300 -text \
		"Processor            "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Processor            " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 3; break"
	set nextscript "catch {focus $oldFocus}; menu4 .menu4 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 3 0 "Enable NOELV RISC-V Processor" CONFIG_NOELV
	int $w.config.f 3 1 "Number of processors" CONFIG_PROC_NUM
	global tmpvar_4
	minimenu $w.config.f 3 2 "NOEL-V RV64 or RV32" tmpvar_4 CONFIG_NOELV_RV64
	menu $w.config.f.x2.x.menu -tearoffcommand "menutitle \"NOEL-V RV64 or RV32\""
	$w.config.f.x2.x.menu add radiobutton -label "RV64" -variable tmpvar_4 -value "RV64" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "RV32" -variable tmpvar_4 -value "RV32" -command "update_active"
	menusplit $w $w.config.f.x2.x.menu 2
	global tmpvar_5
	minimenu $w.config.f 3 3 "Select standard configuration (see help)" tmpvar_5 CONFIG_NOELV_HP
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"Select standard configuration (see help)\""
	$w.config.f.x3.x.menu add radiobutton -label "High-Performance" -variable tmpvar_5 -value "High-Performance" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "General-purpose" -variable tmpvar_5 -value "General-purpose" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "Minimal-configuration" -variable tmpvar_5 -value "Minimal-configuration" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 3
	global tmpvar_6
	minimenu $w.config.f 3 4 "Select Full or (limited) Lite version" tmpvar_6 CONFIG_NOELV_FULL
	menu $w.config.f.x4.x.menu -tearoffcommand "menutitle \"Select Full or (limited) Lite version\""
	$w.config.f.x4.x.menu add radiobutton -label "Full" -variable tmpvar_6 -value "Full" -command "update_active"
	$w.config.f.x4.x.menu add radiobutton -label "Lite" -variable tmpvar_6 -value "Lite" -command "update_active"
	menusplit $w $w.config.f.x4.x.menu 2
	global tmpvar_7
	minimenu $w.config.f 3 5 "Select signel-/dual-issue " tmpvar_7 CONFIG_NOELV_DISSUE
	menu $w.config.f.x5.x.menu -tearoffcommand "menutitle \"Select signel-/dual-issue \""
	$w.config.f.x5.x.menu add radiobutton -label "Dual-issue" -variable tmpvar_7 -value "Dual-issue" -command "update_active"
	$w.config.f.x5.x.menu add radiobutton -label "Single-issue" -variable tmpvar_7 -value "Single-issue" -command "update_active"
	menusplit $w $w.config.f.x5.x.menu 2
	global tmpvar_8
	minimenu $w.config.f 3 6 "Select to enable/disable FPU" tmpvar_8 CONFIG_NOELV_FPU
	menu $w.config.f.x6.x.menu -tearoffcommand "menutitle \"Select to enable/disable FPU\""
	$w.config.f.x6.x.menu add radiobutton -label "FPU-enable" -variable tmpvar_8 -value "FPU-enable" -command "update_active"
	$w.config.f.x6.x.menu add radiobutton -label "FPU-disable" -variable tmpvar_8 -value "FPU-disable" -command "update_active"
	menusplit $w $w.config.f.x6.x.menu 2
	submenu $w.config.f 3 7 "VHDL debug settings       " 4
	submenu $w.config.f 3 8 "NOEL-V subsystem GPL settings       " 5



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu3 {} {
	global CONFIG_NOELV
	global CONFIG_PROC_NUM
	if {($CONFIG_NOELV == 1)} then {.menu3.config.f.x1.x configure -state normal -foreground [ cget .ref -foreground ]; .menu3.config.f.x1.l configure -state normal; } else {.menu3.config.f.x1.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu3.config.f.x1.l configure -state disabled}
	if {($CONFIG_NOELV == 1)} then {configure_entry .menu3.config.f.x2 normal {x l}} else {configure_entry .menu3.config.f.x2 disabled {x l}}
	if {($CONFIG_NOELV == 1)} then {configure_entry .menu3.config.f.x3 normal {x l}} else {configure_entry .menu3.config.f.x3 disabled {x l}}
	global CONFIG_NOELV_GP
	global CONFIG_NOELV_MC
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1 || $CONFIG_NOELV_MC == 1)} then {configure_entry .menu3.config.f.x4 normal {x l}} else {configure_entry .menu3.config.f.x4 disabled {x l}}
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {configure_entry .menu3.config.f.x5 normal {x l}} else {configure_entry .menu3.config.f.x5 disabled {x l}}
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {configure_entry .menu3.config.f.x6 normal {x l}} else {configure_entry .menu3.config.f.x6 disabled {x l}}
	if {($CONFIG_NOELV == 1)} then {configure_entry .menu3.config.f.x7 normal {m}} else {configure_entry .menu3.config.f.x7 disabled {m}}
	if {($CONFIG_NOELV == 1)} then {configure_entry .menu3.config.f.x8 normal {m}} else {configure_entry .menu3.config.f.x8 disabled {m}}
}


proc update_define_menu3 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NOELV_XLEN
	global CONFIG_PROC_TYP
	global CONFIG_PROC_LITE
	global CONFIG_PROC_NOFPU
	global CONFIG_PROC_S
	global CONFIG_NOELV
	global CONFIG_PROC_NUM
	if {($CONFIG_NOELV == 1)} then {validate_int CONFIG_PROC_NUM "$CONFIG_PROC_NUM" 1}
	global tmpvar_4
	global CONFIG_NOELV_RV64
	if {$tmpvar_4 == "RV64"} then {set CONFIG_NOELV_RV64 1} else {set CONFIG_NOELV_RV64 0}
	global CONFIG_NOELV_RV32
	if {$tmpvar_4 == "RV32"} then {set CONFIG_NOELV_RV32 1} else {set CONFIG_NOELV_RV32 0}
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_RV32 == 1)} then {set CONFIG_NOELV_XLEN 32 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_RV32 != 1)} then {set CONFIG_NOELV_XLEN 64 }
	global tmpvar_5
	global CONFIG_NOELV_HP
	if {$tmpvar_5 == "High-Performance"} then {set CONFIG_NOELV_HP 1} else {set CONFIG_NOELV_HP 0}
	global CONFIG_NOELV_GP
	if {$tmpvar_5 == "General-purpose"} then {set CONFIG_NOELV_GP 1} else {set CONFIG_NOELV_GP 0}
	global CONFIG_NOELV_MC
	if {$tmpvar_5 == "Minimal-configuration"} then {set CONFIG_NOELV_MC 1} else {set CONFIG_NOELV_MC 0}
	global tmpvar_6
	global CONFIG_NOELV_FULL
	if {$tmpvar_6 == "Full"} then {set CONFIG_NOELV_FULL 1} else {set CONFIG_NOELV_FULL 0}
	global CONFIG_NOELV_LITE
	if {$tmpvar_6 == "Lite"} then {set CONFIG_NOELV_LITE 1} else {set CONFIG_NOELV_LITE 0}
	global tmpvar_7
	global CONFIG_NOELV_DISSUE
	if {$tmpvar_7 == "Dual-issue"} then {set CONFIG_NOELV_DISSUE 1} else {set CONFIG_NOELV_DISSUE 0}
	global CONFIG_NOELV_SISSUE
	if {$tmpvar_7 == "Single-issue"} then {set CONFIG_NOELV_SISSUE 1} else {set CONFIG_NOELV_SISSUE 0}
	global tmpvar_8
	global CONFIG_NOELV_FPU
	if {$tmpvar_8 == "FPU-enable"} then {set CONFIG_NOELV_FPU 1} else {set CONFIG_NOELV_FPU 0}
	global CONFIG_NOELV_NOFPU
	if {$tmpvar_8 == "FPU-disable"} then {set CONFIG_NOELV_NOFPU 1} else {set CONFIG_NOELV_NOFPU 0}
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {set CONFIG_PROC_TYP 4 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {set CONFIG_PROC_LITE 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {set CONFIG_PROC_NOFPU 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {set CONFIG_PROC_S 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {set CONFIG_PROC_TYP 3 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {set CONFIG_PROC_NOFPU 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_LITE == 1)} then {set CONFIG_PROC_LITE 1 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_LITE != 1)} then {set CONFIG_PROC_LITE 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_SISSUE == 1)} then {set CONFIG_PROC_S 1 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_SISSUE != 1)} then {set CONFIG_PROC_S 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {set CONFIG_PROC_TYP 2 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {set CONFIG_PROC_S 1 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_LITE == 1)} then {set CONFIG_PROC_LITE 1 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_LITE != 1)} then {set CONFIG_PROC_LITE 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_FPU == 1)} then {set CONFIG_PROC_NOFPU 0 }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_FPU != 1)} then {set CONFIG_PROC_NOFPU 1 }
}


proc menu4 {w title} {
	set oldFocus [focus]
	catch {focus .menu3}
	catch {destroy $w; unregister_active 4}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 4]]
	message $w.m -width 400 -aspect 300 -text \
		"VHDL debug settings       "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "VHDL debug settings       " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 4; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu5 .menu5 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 4 0 "Processor disassembly to console         " CONFIG_IU_DISAS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu3] == 0} then {menu3 .menu3 "Processor            "}
	set winx [expr [winfo x .menu3]+30]; set winy [expr [winfo y .menu3]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu4 {} {
	global CONFIG_NOELV
	global CONFIG_IU_DISAS
	if {($CONFIG_NOELV == 1)} then {
	configure_entry .menu4.config.f.x0 normal {n l y}} else {configure_entry .menu4.config.f.x0 disabled {y n l}}
}


proc update_define_menu4 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NOELV
	global CONFIG_IU_DISAS
	if {($CONFIG_NOELV == 1)} then {
	set CONFIG_IU_DISAS [expr $CONFIG_IU_DISAS&15]} else {set CONFIG_IU_DISAS [expr $CONFIG_IU_DISAS|16]}
}


proc menu5 {w title} {
	set oldFocus [focus]
	catch {focus .menu3}
	catch {destroy $w; unregister_active 5}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 5]]
	message $w.m -width 400 -aspect 300 -text \
		"NOEL-V subsystem GPL settings       "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "NOEL-V subsystem GPL settings       " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 5; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 5; catch {destroy .menu3}; unregister_active 3; menu6 .menu6 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 5 0 "disable non-GPL components               " CONFIG_PROC_NODBUS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu3] == 0} then {menu3 .menu3 "Processor            "}
	set winx [expr [winfo x .menu3]+30]; set winy [expr [winfo y .menu3]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu5 {} {
	global CONFIG_NOELV
	global CONFIG_PROC_NODBUS
	if {($CONFIG_NOELV == 1)} then {
	configure_entry .menu5.config.f.x0 normal {n l y}} else {configure_entry .menu5.config.f.x0 disabled {y n l}}
}


proc update_define_menu5 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NOELV
	global CONFIG_PROC_NODBUS
	if {($CONFIG_NOELV == 1)} then {
	set CONFIG_PROC_NODBUS [expr $CONFIG_PROC_NODBUS&15]} else {set CONFIG_PROC_NODBUS [expr $CONFIG_PROC_NODBUS|16]}
}


menu_option menu6 6 "L2 Cache"
proc menu6 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 6}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 6]]
	message $w.m -width 400 -aspect 300 -text \
		"L2 Cache"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "L2 Cache" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 6; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu7 .menu7 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 6 0 "Enable L2 Cache                      " CONFIG_L2_ENABLE
	global tmpvar_9
	minimenu $w.config.f 6 1 "Associativity (ways)            " tmpvar_9 CONFIG_L2_ASSO1
	menu $w.config.f.x1.x.menu -tearoffcommand "menutitle \"Associativity (ways)            \""
	$w.config.f.x1.x.menu add radiobutton -label "1" -variable tmpvar_9 -value "1" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "2" -variable tmpvar_9 -value "2" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "3" -variable tmpvar_9 -value "3" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "4" -variable tmpvar_9 -value "4" -command "update_active"
	menusplit $w $w.config.f.x1.x.menu 4
	global tmpvar_10
	minimenu $w.config.f 6 2 "Way size (kbytes/way)" tmpvar_10 CONFIG_L2_SZ1
	menu $w.config.f.x2.x.menu -tearoffcommand "menutitle \"Way size (kbytes/way)\""
	$w.config.f.x2.x.menu add radiobutton -label "1" -variable tmpvar_10 -value "1" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "2" -variable tmpvar_10 -value "2" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "4" -variable tmpvar_10 -value "4" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "8" -variable tmpvar_10 -value "8" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "16" -variable tmpvar_10 -value "16" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "32" -variable tmpvar_10 -value "32" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "64" -variable tmpvar_10 -value "64" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "128" -variable tmpvar_10 -value "128" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "256" -variable tmpvar_10 -value "256" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "512" -variable tmpvar_10 -value "512" -command "update_active"
	menusplit $w $w.config.f.x2.x.menu 10
	global tmpvar_11
	minimenu $w.config.f 6 3 "Line size (bytes)            " tmpvar_11 CONFIG_L2_LINE32
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"Line size (bytes)            \""
	$w.config.f.x3.x.menu add radiobutton -label "32" -variable tmpvar_11 -value "32" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "64" -variable tmpvar_11 -value "64" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 2
	bool $w.config.f 6 4 "Use HPROT information                " CONFIG_L2_HPROT
	bool $w.config.f 6 5 "Enable L2 cache at power-on          " CONFIG_L2_PEN
	bool $w.config.f 6 6 "Enable write-through at power-on     " CONFIG_L2_WT
	bool $w.config.f 6 7 "Random replacement (LRU default)     " CONFIG_L2_RAN
	bool $w.config.f 6 8 "Shared RAM for multi-way caches      " CONFIG_L2_SHARE
	hex $w.config.f 6 9 "Cacheability map                     " CONFIG_L2_MAP
	int $w.config.f 6 10 "Number of MTRR registers             " CONFIG_L2_MTRR
	global tmpvar_12
	minimenu $w.config.f 6 11 "Enable EDAC            " tmpvar_12 CONFIG_L2_EDAC_NONE
	menu $w.config.f.x11.x.menu -tearoffcommand "menutitle \"Enable EDAC            \""
	$w.config.f.x11.x.menu add radiobutton -label "None" -variable tmpvar_12 -value "None" -command "update_active"
	$w.config.f.x11.x.menu add radiobutton -label "Yes" -variable tmpvar_12 -value "Yes" -command "update_active"
	$w.config.f.x11.x.menu add radiobutton -label "TechSpec" -variable tmpvar_12 -value "TechSpec" -command "update_active"
	menusplit $w $w.config.f.x11.x.menu 3
	bool $w.config.f 6 12 "AXI backend interface                " CONFIG_L2_AXI



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu6 {} {
	global CONFIG_L2_ASSO1
	global CONFIG_L2_SHARE
	if {($CONFIG_L2_ASSO1 != "1")} then {
	configure_entry .menu6.config.f.x8 normal {n l y}} else {configure_entry .menu6.config.f.x8 disabled {y n l}}
}


proc update_define_menu6 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global tmpvar_9
	global CONFIG_L2_ASSO1
	if {$tmpvar_9 == "1"} then {set CONFIG_L2_ASSO1 1} else {set CONFIG_L2_ASSO1 0}
	global CONFIG_L2_ASSO2
	if {$tmpvar_9 == "2"} then {set CONFIG_L2_ASSO2 1} else {set CONFIG_L2_ASSO2 0}
	global CONFIG_L2_ASSO3
	if {$tmpvar_9 == "3"} then {set CONFIG_L2_ASSO3 1} else {set CONFIG_L2_ASSO3 0}
	global CONFIG_L2_ASSO4
	if {$tmpvar_9 == "4"} then {set CONFIG_L2_ASSO4 1} else {set CONFIG_L2_ASSO4 0}
	global tmpvar_10
	global CONFIG_L2_SZ1
	if {$tmpvar_10 == "1"} then {set CONFIG_L2_SZ1 1} else {set CONFIG_L2_SZ1 0}
	global CONFIG_L2_SZ2
	if {$tmpvar_10 == "2"} then {set CONFIG_L2_SZ2 1} else {set CONFIG_L2_SZ2 0}
	global CONFIG_L2_SZ4
	if {$tmpvar_10 == "4"} then {set CONFIG_L2_SZ4 1} else {set CONFIG_L2_SZ4 0}
	global CONFIG_L2_SZ8
	if {$tmpvar_10 == "8"} then {set CONFIG_L2_SZ8 1} else {set CONFIG_L2_SZ8 0}
	global CONFIG_L2_SZ16
	if {$tmpvar_10 == "16"} then {set CONFIG_L2_SZ16 1} else {set CONFIG_L2_SZ16 0}
	global CONFIG_L2_SZ32
	if {$tmpvar_10 == "32"} then {set CONFIG_L2_SZ32 1} else {set CONFIG_L2_SZ32 0}
	global CONFIG_L2_SZ64
	if {$tmpvar_10 == "64"} then {set CONFIG_L2_SZ64 1} else {set CONFIG_L2_SZ64 0}
	global CONFIG_L2_SZ128
	if {$tmpvar_10 == "128"} then {set CONFIG_L2_SZ128 1} else {set CONFIG_L2_SZ128 0}
	global CONFIG_L2_SZ256
	if {$tmpvar_10 == "256"} then {set CONFIG_L2_SZ256 1} else {set CONFIG_L2_SZ256 0}
	global CONFIG_L2_SZ512
	if {$tmpvar_10 == "512"} then {set CONFIG_L2_SZ512 1} else {set CONFIG_L2_SZ512 0}
	global tmpvar_11
	global CONFIG_L2_LINE32
	if {$tmpvar_11 == "32"} then {set CONFIG_L2_LINE32 1} else {set CONFIG_L2_LINE32 0}
	global CONFIG_L2_LINE64
	if {$tmpvar_11 == "64"} then {set CONFIG_L2_LINE64 1} else {set CONFIG_L2_LINE64 0}
	global CONFIG_L2_SHARE
	if {($CONFIG_L2_ASSO1 != "1")} then {
	set CONFIG_L2_SHARE [expr $CONFIG_L2_SHARE&15]} else {set CONFIG_L2_SHARE [expr $CONFIG_L2_SHARE|16]}
	global tmpvar_12
	global CONFIG_L2_EDAC_NONE
	if {$tmpvar_12 == "None"} then {set CONFIG_L2_EDAC_NONE 1} else {set CONFIG_L2_EDAC_NONE 0}
	global CONFIG_L2_EDAC_YES
	if {$tmpvar_12 == "Yes"} then {set CONFIG_L2_EDAC_YES 1} else {set CONFIG_L2_EDAC_YES 0}
	global CONFIG_L2_EDAC_TECHSPEC
	if {$tmpvar_12 == "TechSpec"} then {set CONFIG_L2_EDAC_TECHSPEC 1} else {set CONFIG_L2_EDAC_TECHSPEC 0}
}


menu_option menu7 7 "AMBA configuration"
proc menu7 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 7}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 7]]
	message $w.m -width 400 -aspect 300 -text \
		"AMBA configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "AMBA configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 7; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu8 .menu8 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	int $w.config.f 7 0 "Default AHB master" CONFIG_AHB_DEFMST
	bool $w.config.f 7 1 "Round-robin arbiter                       " CONFIG_AHB_RROBIN
	bool $w.config.f 7 2 "AHB split-transaction support             " CONFIG_AHB_SPLIT
	bool $w.config.f 7 3 "Enable full plug&play decoding            " CONFIG_AHB_FPNPEN
	hex $w.config.f 7 4 "I/O area start address (haddr\[31:20\]) " CONFIG_AHB_IOADDR
	hex $w.config.f 7 5 "AHB/APB bridge address (haddr\[31:20\]) " CONFIG_APB_HADDR
	bool $w.config.f 7 6 "Enable AMBA AHB monitor              " CONFIG_AHB_MON
	bool $w.config.f 7 7 "Report AHB errors                  " CONFIG_AHB_MONERR
	bool $w.config.f 7 8 "Report AHB warings                 " CONFIG_AHB_MONWAR
	bool $w.config.f 7 9 "Write trace to simulation console    " CONFIG_AHB_DTRACE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu7 {} {
	global CONFIG_AHB_MON
	global CONFIG_AHB_MONERR
	if {($CONFIG_AHB_MON == 1)} then {
	configure_entry .menu7.config.f.x7 normal {n l y}} else {configure_entry .menu7.config.f.x7 disabled {y n l}}
	global CONFIG_AHB_MONWAR
	if {($CONFIG_AHB_MON == 1)} then {
	configure_entry .menu7.config.f.x8 normal {n l y}} else {configure_entry .menu7.config.f.x8 disabled {y n l}}
}


proc update_define_menu7 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_AHB_MON
	global CONFIG_AHB_MONERR
	if {($CONFIG_AHB_MON == 1)} then {
	set CONFIG_AHB_MONERR [expr $CONFIG_AHB_MONERR&15]} else {set CONFIG_AHB_MONERR [expr $CONFIG_AHB_MONERR|16]}
	global CONFIG_AHB_MONWAR
	if {($CONFIG_AHB_MON == 1)} then {
	set CONFIG_AHB_MONWAR [expr $CONFIG_AHB_MONWAR&15]} else {set CONFIG_AHB_MONWAR [expr $CONFIG_AHB_MONWAR|16]}
}


menu_option menu8 8 "Debug Link           "
proc menu8 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 8}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 8]]
	message $w.m -width 400 -aspect 300 -text \
		"Debug Link           "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Debug Link           " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 8; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu9 .menu9 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 8 0 "Serial Debug Link (RS232)                " CONFIG_DSU_UART
	bool $w.config.f 8 1 "JTAG Debug Link" CONFIG_DSU_JTAG
	bool $w.config.f 8 2 "Ethernet Debug Communication Link (EDCL)" CONFIG_DSU_ETH
	global tmpvar_13
	minimenu $w.config.f 8 3 "Ethernet/AHB bridge buffer size (kbytes)" tmpvar_13 CONFIG_DSU_ETHSZ1
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"Ethernet/AHB bridge buffer size (kbytes)\""
	$w.config.f.x3.x.menu add radiobutton -label "1" -variable tmpvar_13 -value "1" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "2" -variable tmpvar_13 -value "2" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "4" -variable tmpvar_13 -value "4" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "8" -variable tmpvar_13 -value "8" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "16" -variable tmpvar_13 -value "16" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 5
	hex $w.config.f 8 4 "MSB 16 bits of IP address (hex)       " CONFIG_DSU_IPMSB
	hex $w.config.f 8 5 "LSB 16 bits of IP address (hex)       " CONFIG_DSU_IPLSB
	hex $w.config.f 8 6 "MSB 24 bits of ethern number (hex)    " CONFIG_DSU_ETHMSB
	hex $w.config.f 8 7 "LSB 24 bits of ethern number (hex)    " CONFIG_DSU_ETHLSB
	bool $w.config.f 8 8 "Programmable 4-bit LSB of MAC/IP address" CONFIG_DSU_ETH_PROG
	bool $w.config.f 8 9 "EDCL disable pin                     " CONFIG_DSU_ETH_DIS



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu8 {} {
	global CONFIG_GRETH_ENABLE
	global CONFIG_DSU_ETH
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	configure_entry .menu8.config.f.x2 normal {n l y}} else {configure_entry .menu8.config.f.x2 disabled {y n l}}
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {configure_entry .menu8.config.f.x3 normal {x l}} else {configure_entry .menu8.config.f.x3 disabled {x l}}
	global CONFIG_DSU_IPMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {.menu8.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x4.l configure -state normal; } else {.menu8.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x4.l configure -state disabled}
	global CONFIG_DSU_IPLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {.menu8.config.f.x5.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x5.l configure -state normal; } else {.menu8.config.f.x5.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x5.l configure -state disabled}
	global CONFIG_DSU_ETHMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {.menu8.config.f.x6.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x6.l configure -state normal; } else {.menu8.config.f.x6.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x6.l configure -state disabled}
	global CONFIG_DSU_ETHLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {.menu8.config.f.x7.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x7.l configure -state normal; } else {.menu8.config.f.x7.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x7.l configure -state disabled}
	global CONFIG_DSU_ETH_PROG
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {
	configure_entry .menu8.config.f.x8 normal {n l y}} else {configure_entry .menu8.config.f.x8 disabled {y n l}}
	global CONFIG_DSU_ETH_DIS
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1) && ($CONFIG_DSU_ETH_PROG == 1)} then {
	configure_entry .menu8.config.f.x9 normal {n l y}} else {configure_entry .menu8.config.f.x9 disabled {y n l}}
}


proc update_define_menu8 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRETH_ENABLE
	global CONFIG_DSU_ETH
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	set CONFIG_DSU_ETH [expr $CONFIG_DSU_ETH&15]} else {set CONFIG_DSU_ETH [expr $CONFIG_DSU_ETH|16]}
	global tmpvar_13
	global CONFIG_DSU_ETHSZ1
	if {$tmpvar_13 == "1"} then {set CONFIG_DSU_ETHSZ1 1} else {set CONFIG_DSU_ETHSZ1 0}
	global CONFIG_DSU_ETHSZ2
	if {$tmpvar_13 == "2"} then {set CONFIG_DSU_ETHSZ2 1} else {set CONFIG_DSU_ETHSZ2 0}
	global CONFIG_DSU_ETHSZ4
	if {$tmpvar_13 == "4"} then {set CONFIG_DSU_ETHSZ4 1} else {set CONFIG_DSU_ETHSZ4 0}
	global CONFIG_DSU_ETHSZ8
	if {$tmpvar_13 == "8"} then {set CONFIG_DSU_ETHSZ8 1} else {set CONFIG_DSU_ETHSZ8 0}
	global CONFIG_DSU_ETHSZ16
	if {$tmpvar_13 == "16"} then {set CONFIG_DSU_ETHSZ16 1} else {set CONFIG_DSU_ETHSZ16 0}
	global CONFIG_DSU_IPMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {validate_hex CONFIG_DSU_IPMSB "$CONFIG_DSU_IPMSB" C0A8}
	global CONFIG_DSU_IPLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {validate_hex CONFIG_DSU_IPLSB "$CONFIG_DSU_IPLSB" 0033}
	global CONFIG_DSU_ETHMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {validate_hex CONFIG_DSU_ETHMSB "$CONFIG_DSU_ETHMSB" 020000}
	global CONFIG_DSU_ETHLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {validate_hex CONFIG_DSU_ETHLSB "$CONFIG_DSU_ETHLSB" 000000}
	global CONFIG_DSU_ETH_PROG
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {
	set CONFIG_DSU_ETH_PROG [expr $CONFIG_DSU_ETH_PROG&15]} else {set CONFIG_DSU_ETH_PROG [expr $CONFIG_DSU_ETH_PROG|16]}
	global CONFIG_DSU_ETH_DIS
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1) && ($CONFIG_DSU_ETH_PROG == 1)} then {
	set CONFIG_DSU_ETH_DIS [expr $CONFIG_DSU_ETH_DIS&15]} else {set CONFIG_DSU_ETH_DIS [expr $CONFIG_DSU_ETH_DIS|16]}
}


menu_option menu9 9 "Peripherals             "
proc menu9 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 9}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 9]]
	message $w.m -width 400 -aspect 300 -text \
		"Peripherals             "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Peripherals             " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 9; break"
	set nextscript "catch {focus $oldFocus}; menu10 .menu10 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	submenu $w.config.f 9 0 "Memory controller             " 10
	submenu $w.config.f 9 1 "Ethernet             " 12
	submenu $w.config.f 9 2 "UARTs, timers and irq control         " 13



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu9 {} {
}


proc update_define_menu9 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


proc menu10 {w title} {
	set oldFocus [focus]
	catch {focus .menu9}
	catch {destroy $w; unregister_active 10}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 10]]
	message $w.m -width 400 -aspect 300 -text \
		"Memory controller             "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Memory controller             " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 10; break"
	set nextscript "catch {focus $oldFocus}; menu11 .menu11 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	submenu $w.config.f 10 0 "MIG 7-Series memory controller   " 11
	bool $w.config.f 10 1 "Enable AHB Status Register  " CONFIG_AHBSTAT_ENABLE
	int $w.config.f 10 2 "Number of correctable-error slaves  " CONFIG_AHBSTAT_NFTSLV



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu9] == 0} then {menu9 .menu9 "Peripherals             "}
	set winx [expr [winfo x .menu9]+30]; set winy [expr [winfo y .menu9]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu10 {} {
	global CONFIG_AHBSTAT_ENABLE
	global CONFIG_AHBSTAT_NFTSLV
	if {($CONFIG_AHBSTAT_ENABLE == 1)} then {.menu10.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu10.config.f.x2.l configure -state normal; } else {.menu10.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu10.config.f.x2.l configure -state disabled}
}


proc update_define_menu10 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_AHBSTAT_ENABLE
	global CONFIG_AHBSTAT_NFTSLV
	if {($CONFIG_AHBSTAT_ENABLE == 1)} then {validate_int CONFIG_AHBSTAT_NFTSLV "$CONFIG_AHBSTAT_NFTSLV" 1}
}


proc menu11 {w title} {
	set oldFocus [focus]
	catch {focus .menu10}
	catch {destroy $w; unregister_active 11}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 11]]
	message $w.m -width 400 -aspect 300 -text \
		"MIG 7-Series memory controller   "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "MIG 7-Series memory controller   " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 11; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 11; catch {destroy .menu10}; unregister_active 10; menu12 .menu12 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 11 0 "Enable Xilinx DDR3 MIG memory controller" CONFIG_MIG_7SERIES
	bool $w.config.f 11 1 "Enable fast simulation model  " CONFIG_MIG_7SERIES_MODEL



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu10] == 0} then {menu10 .menu10 "Memory controller             "}
	set winx [expr [winfo x .menu10]+30]; set winy [expr [winfo y .menu10]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu11 {} {
}


proc update_define_menu11 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


proc menu12 {w title} {
	set oldFocus [focus]
	catch {focus .menu9}
	catch {destroy $w; unregister_active 12}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 12]]
	message $w.m -width 400 -aspect 300 -text \
		"Ethernet             "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Ethernet             " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 12; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu13 .menu13 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 12 0 "Gaisler Research 10/100/1000 Mbit Ethernet MAC " CONFIG_GRETH_ENABLE
	bool $w.config.f 12 1 "Enable 1000 Mbit support    " CONFIG_GRETH_GIGA
	global tmpvar_14
	minimenu $w.config.f 12 2 "AHB FIFO size (words)            " tmpvar_14 CONFIG_GRETH_FIFO4
	menu $w.config.f.x2.x.menu -tearoffcommand "menutitle \"AHB FIFO size (words)            \""
	$w.config.f.x2.x.menu add radiobutton -label "4" -variable tmpvar_14 -value "4" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "8" -variable tmpvar_14 -value "8" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "16" -variable tmpvar_14 -value "16" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "32" -variable tmpvar_14 -value "32" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "64" -variable tmpvar_14 -value "64" -command "update_active"
	menusplit $w $w.config.f.x2.x.menu 5
	bool $w.config.f 12 3 "Enable FMC" CONFIG_GRETH_FMC_MODE
	int $w.config.f 12 4 "PHY address  " CONFIG_GRETH_PHY_ADDR



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu9] == 0} then {menu9 .menu9 "Peripherals             "}
	set winx [expr [winfo x .menu9]+30]; set winy [expr [winfo y .menu9]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu12 {} {
	global CONFIG_GRETH_ENABLE
	global CONFIG_GRETH_GIGA
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	configure_entry .menu12.config.f.x1 normal {n l y}} else {configure_entry .menu12.config.f.x1 disabled {y n l}}
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_GRETH_GIGA == 0)} then {configure_entry .menu12.config.f.x2 normal {x l}} else {configure_entry .menu12.config.f.x2 disabled {x l}}
	global CONFIG_GRETH_FMC_MODE
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	configure_entry .menu12.config.f.x3 normal {n l y}} else {configure_entry .menu12.config.f.x3 disabled {y n l}}
	global CONFIG_GRETH_PHY_ADDR
	if {($CONFIG_GRETH_ENABLE == 1)} then {.menu12.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x4.l configure -state normal; } else {.menu12.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x4.l configure -state disabled}
}


proc update_define_menu12 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRETH_ENABLE
	global CONFIG_GRETH_GIGA
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	set CONFIG_GRETH_GIGA [expr $CONFIG_GRETH_GIGA&15]} else {set CONFIG_GRETH_GIGA [expr $CONFIG_GRETH_GIGA|16]}
	global tmpvar_14
	global CONFIG_GRETH_FIFO4
	if {$tmpvar_14 == "4"} then {set CONFIG_GRETH_FIFO4 1} else {set CONFIG_GRETH_FIFO4 0}
	global CONFIG_GRETH_FIFO8
	if {$tmpvar_14 == "8"} then {set CONFIG_GRETH_FIFO8 1} else {set CONFIG_GRETH_FIFO8 0}
	global CONFIG_GRETH_FIFO16
	if {$tmpvar_14 == "16"} then {set CONFIG_GRETH_FIFO16 1} else {set CONFIG_GRETH_FIFO16 0}
	global CONFIG_GRETH_FIFO32
	if {$tmpvar_14 == "32"} then {set CONFIG_GRETH_FIFO32 1} else {set CONFIG_GRETH_FIFO32 0}
	global CONFIG_GRETH_FIFO64
	if {$tmpvar_14 == "64"} then {set CONFIG_GRETH_FIFO64 1} else {set CONFIG_GRETH_FIFO64 0}
	global CONFIG_GRETH_FMC_MODE
	if {($CONFIG_GRETH_ENABLE == 1)} then {
	set CONFIG_GRETH_FMC_MODE [expr $CONFIG_GRETH_FMC_MODE&15]} else {set CONFIG_GRETH_FMC_MODE [expr $CONFIG_GRETH_FMC_MODE|16]}
	global CONFIG_GRETH_PHY_ADDR
	if {($CONFIG_GRETH_ENABLE == 1)} then {validate_int CONFIG_GRETH_PHY_ADDR "$CONFIG_GRETH_PHY_ADDR" 1}
}


proc menu13 {w title} {
	set oldFocus [focus]
	catch {focus .menu9}
	catch {destroy $w; unregister_active 13}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 13]]
	message $w.m -width 400 -aspect 300 -text \
		"UARTs, timers and irq control         "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "UARTs, timers and irq control         " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 13; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 13; catch {destroy .menu9}; unregister_active 9; menu14 .menu14 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 13 0 "Enable generic GPIO port              " CONFIG_GRGPIO_ENABLE
	int $w.config.f 13 1 "GPIO width            " CONFIG_GRGPIO_WIDTH
	hex $w.config.f 13 2 "GPIO interrupt mask   " CONFIG_GRGPIO_IMASK



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu9] == 0} then {menu9 .menu9 "Peripherals             "}
	set winx [expr [winfo x .menu9]+30]; set winy [expr [winfo y .menu9]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu13 {} {
	global CONFIG_GRGPIO_ENABLE
	global CONFIG_GRGPIO_WIDTH
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {.menu13.config.f.x1.x configure -state normal -foreground [ cget .ref -foreground ]; .menu13.config.f.x1.l configure -state normal; } else {.menu13.config.f.x1.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu13.config.f.x1.l configure -state disabled}
	global CONFIG_GRGPIO_IMASK
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {.menu13.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu13.config.f.x2.l configure -state normal; } else {.menu13.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu13.config.f.x2.l configure -state disabled}
}


proc update_define_menu13 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRGPIO_ENABLE
	global CONFIG_GRGPIO_WIDTH
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {validate_int CONFIG_GRGPIO_WIDTH "$CONFIG_GRGPIO_WIDTH" 8}
	global CONFIG_GRGPIO_IMASK
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {validate_hex CONFIG_GRGPIO_IMASK "$CONFIG_GRGPIO_IMASK" 0000}
}


menu_option menu14 14 "VHDL Debugging        "
proc menu14 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 14}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 14]]
	message $w.m -width 400 -aspect 300 -text \
		"VHDL Debugging        "  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "VHDL Debugging        " 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 14; break"
	set nextscript "catch {focus $oldFocus}; menu15 .menu15 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	$w.f.next configure -state disabled
	bind all <Alt-n> "puts \"no more menus\" "
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14; menu13 .menu13 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 14; menu13 .menu13 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 14 0 "Accelerated UART tracing       " CONFIG_DEBUG_UART



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu14 {} {
}


proc update_define_menu14 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


proc update_mainmenu {}  {
}


set tmpvar_0 "(not set)"
set CONFIG_SYN_INFERRED 0
set CONFIG_SYN_AXCEL 0
set CONFIG_SYN_AXDSP 0
set CONFIG_SYN_FUSION 0
set CONFIG_SYN_PROASIC 0
set CONFIG_SYN_PROASICPLUS 0
set CONFIG_SYN_PROASIC3 0
set CONFIG_SYN_PROASIC3E 0
set CONFIG_SYN_PROASIC3L 0
set CONFIG_SYN_IGLOO 0
set CONFIG_SYN_IGLOO2 0
set CONFIG_SYN_SF2 0
set CONFIG_SYN_RTG4 0
set CONFIG_SYN_POLARFIRE 0
set CONFIG_SYN_UT025CRH 0
set CONFIG_SYN_UT130HBD 0
set CONFIG_SYN_UT90NHBD 0
set CONFIG_SYN_CYCLONEIII 0
set CONFIG_SYN_STRATIX 0
set CONFIG_SYN_STRATIXII 0
set CONFIG_SYN_STRATIXIII 0
set CONFIG_SYN_STRATIXIV 0
set CONFIG_SYN_STRATIXV 0
set CONFIG_SYN_ALTERA 0
set CONFIG_SYN_ATC18 0
set CONFIG_SYN_ATC18RHA 0
set CONFIG_SYN_CUSTOM1 0
set CONFIG_SYN_DARE 0
set CONFIG_SYN_CMOS9SF 0
set CONFIG_SYN_BRAVEMED 0
set CONFIG_SYN_ECLIPSE 0
set CONFIG_SYN_RH_LIB18T 0
set CONFIG_SYN_RHUMC 0
set CONFIG_SYN_RHS65 0
set CONFIG_SYN_SAED32 0
set CONFIG_SYN_SMIC13 0
set CONFIG_SYN_TM65GPLUS 0
set CONFIG_SYN_TSMC90 0
set CONFIG_SYN_UMC 0
set CONFIG_SYN_ARTIX7 0
set CONFIG_SYN_KINTEX7 0
set CONFIG_SYN_KINTEXU 0
set CONFIG_SYN_SPARTAN3 0
set CONFIG_SYN_SPARTAN3E 0
set CONFIG_SYN_SPARTAN6 0
set CONFIG_SYN_VIRTEX2 0
set CONFIG_SYN_VIRTEX4 0
set CONFIG_SYN_VIRTEX5 0
set CONFIG_SYN_VIRTEX6 0
set CONFIG_SYN_VIRTEX7 0
set CONFIG_SYN_ZYNQ7000 0
set tmpvar_1 "(not set)"
set CONFIG_MEM_INFERRED 0
set CONFIG_MEM_UMC 0
set CONFIG_MEM_RHUMC 0
set CONFIG_MEM_SAED32 0
set CONFIG_MEM_DARE 0
set CONFIG_MEM_RHS65 0
set CONFIG_MEM_ARTISAN 0
set CONFIG_MEM_CUSTOM1 0
set CONFIG_MEM_VIRAGE 0
set CONFIG_MEM_VIRAGE90 0
set tmpvar_2 "(not set)"
set CONFIG_TRANS_GTP0 0
set CONFIG_TRANS_GTP1 0
set CONFIG_TRANS_GTX0 0
set CONFIG_TRANS_GTX1 0
set CONFIG_TRANS_GTH0 0
set CONFIG_TRANS_GTH1 0
set CONFIG_SYN_INFER_RAM 0
set CONFIG_SYN_INFER_PADS 0
set CONFIG_SYN_NO_ASYNC 0
set CONFIG_SYN_SCAN 0
set tmpvar_3 "(not set)"
set CONFIG_CLK_INFERRED 0
set CONFIG_CLK_HCLKBUF 0
set CONFIG_CLK_UT130HBD 0
set CONFIG_CLK_ALTDLL 0
set CONFIG_CLK_BRAVEMED 0
set CONFIG_CLK_PRO3PLL 0
set CONFIG_CLK_PRO3EPLL 0
set CONFIG_CLK_PRO3LPLL 0
set CONFIG_CLK_FUSPLL 0
set CONFIG_CLK_LIB18T 0
set CONFIG_CLK_RHUMC 0
set CONFIG_CLK_DARE 0
set CONFIG_CLK_SAED32 0
set CONFIG_CLK_EASIC45 0
set CONFIG_CLK_RHS65 0
set CONFIG_CLK_CLKPLLE2 0
set CONFIG_CLK_CLKDLL 0
set CONFIG_CLK_DCM 0
set CONFIG_CLK_MUL 2
set CONFIG_CLK_DIV 2
set CONFIG_OCLK_DIV 1
set CONFIG_OCLKB_DIV 0
set CONFIG_OCLKC_DIV 0
set CONFIG_PCI_CLKDLL 0
set CONFIG_CLK_NOFB 0
set CONFIG_PCI_SYSCLK 0
set CONFIG_NOELV 0
set CONFIG_PROC_NUM 1
set tmpvar_4 "(not set)"
set CONFIG_NOELV_RV64 0
set CONFIG_NOELV_RV32 0
set tmpvar_5 "(not set)"
set CONFIG_NOELV_HP 0
set CONFIG_NOELV_GP 0
set CONFIG_NOELV_MC 0
set tmpvar_6 "(not set)"
set CONFIG_NOELV_FULL 0
set CONFIG_NOELV_LITE 0
set tmpvar_7 "(not set)"
set CONFIG_NOELV_DISSUE 0
set CONFIG_NOELV_SISSUE 0
set tmpvar_8 "(not set)"
set CONFIG_NOELV_FPU 0
set CONFIG_NOELV_NOFPU 0
set CONFIG_IU_DISAS 0
set CONFIG_PROC_NODBUS 0
set CONFIG_L2_ENABLE 0
set tmpvar_9 "(not set)"
set CONFIG_L2_ASSO1 0
set CONFIG_L2_ASSO2 0
set CONFIG_L2_ASSO3 0
set CONFIG_L2_ASSO4 0
set tmpvar_10 "(not set)"
set CONFIG_L2_SZ1 0
set CONFIG_L2_SZ2 0
set CONFIG_L2_SZ4 0
set CONFIG_L2_SZ8 0
set CONFIG_L2_SZ16 0
set CONFIG_L2_SZ32 0
set CONFIG_L2_SZ64 0
set CONFIG_L2_SZ128 0
set CONFIG_L2_SZ256 0
set CONFIG_L2_SZ512 0
set tmpvar_11 "(not set)"
set CONFIG_L2_LINE32 0
set CONFIG_L2_LINE64 0
set CONFIG_L2_HPROT 0
set CONFIG_L2_PEN 0
set CONFIG_L2_WT 0
set CONFIG_L2_RAN 0
set CONFIG_L2_SHARE 0
set CONFIG_L2_MAP 00F0
set CONFIG_L2_MTRR 0
set tmpvar_12 "(not set)"
set CONFIG_L2_EDAC_NONE 0
set CONFIG_L2_EDAC_YES 0
set CONFIG_L2_EDAC_TECHSPEC 0
set CONFIG_L2_AXI 0
set CONFIG_AHB_DEFMST 0
set CONFIG_AHB_RROBIN 0
set CONFIG_AHB_SPLIT 0
set CONFIG_AHB_FPNPEN 0
set CONFIG_AHB_IOADDR FFF
set CONFIG_APB_HADDR 800
set CONFIG_AHB_MON 0
set CONFIG_AHB_MONERR 0
set CONFIG_AHB_MONWAR 0
set CONFIG_AHB_DTRACE 0
set CONFIG_DSU_UART 0
set CONFIG_DSU_JTAG 0
set CONFIG_DSU_ETH 0
set tmpvar_13 "(not set)"
set CONFIG_DSU_ETHSZ1 0
set CONFIG_DSU_ETHSZ2 0
set CONFIG_DSU_ETHSZ4 0
set CONFIG_DSU_ETHSZ8 0
set CONFIG_DSU_ETHSZ16 0
set CONFIG_DSU_IPMSB C0A8
set CONFIG_DSU_IPLSB 0033
set CONFIG_DSU_ETHMSB 020000
set CONFIG_DSU_ETHLSB 000000
set CONFIG_DSU_ETH_PROG 0
set CONFIG_DSU_ETH_DIS 0
set CONFIG_MIG_7SERIES 0
set CONFIG_MIG_7SERIES_MODEL 0
set CONFIG_AHBSTAT_ENABLE 0
set CONFIG_AHBSTAT_NFTSLV 1
set CONFIG_GRETH_ENABLE 0
set CONFIG_GRETH_GIGA 0
set tmpvar_14 "(not set)"
set CONFIG_GRETH_FIFO4 0
set CONFIG_GRETH_FIFO8 0
set CONFIG_GRETH_FIFO16 0
set CONFIG_GRETH_FIFO32 0
set CONFIG_GRETH_FIFO64 0
set CONFIG_GRETH_FMC_MODE 0
set CONFIG_GRETH_PHY_ADDR 1
set CONFIG_GRGPIO_ENABLE 0
set CONFIG_GRGPIO_WIDTH 8
set CONFIG_GRGPIO_IMASK 0000
set CONFIG_DEBUG_UART 0
set CONFIG_HAS_SHARED_GRFPU 4
set CONFIG_SYN_ARTISAN 4
set CONFIG_CLK_LATDLL 4
set CONFIG_PCI_ENABLE 4
set CONFIG_NOELV_XLEN 4
set CONFIG_PROC_TYP 4
set CONFIG_PROC_LITE 4
set CONFIG_PROC_NOFPU 4
set CONFIG_PROC_S 4
set CONFIG_LEON3FT_PRESENT 4
set CONFIG_GRETH_FT 4
set CONFIG_GRETH_EDCLFT 4
set CONFIG_GRETH_SGMII_PRESENT 4
set CONFIG_GRETH_SGMII_MODE 4
set CONFIG_MODULES 4
proc writeconfig {file1 file2} {
	set cfg [open $file1 w]
	set autocfg [open $file2 w]
	set notmod 1
	set notset 0
	puts $cfg "#"
	puts $cfg "# Automatically generated make config: don't edit"
	puts $cfg "#"
	puts $autocfg "/*"
	puts $autocfg " * Automatically generated C config: don't edit"
	puts $autocfg " */"
	puts $autocfg "#define AUTOCONF_INCLUDED"
	global CONFIG_HAS_SHARED_GRFPU
	global CONSTANT_Y
	write_tristate $cfg $autocfg CONFIG_HAS_SHARED_GRFPU $CONFIG_HAS_SHARED_GRFPU [list $notmod] 2
	write_comment $cfg $autocfg "Synthesis      "
	global tmpvar_0
	
	if { $tmpvar_0 == "Inferred" } then { write_tristate $cfg $autocfg CONFIG_SYN_INFERRED 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_INFERRED 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Axcelerator" } then { write_tristate $cfg $autocfg CONFIG_SYN_AXCEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_AXCEL 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Axcelerator-DSP" } then { write_tristate $cfg $autocfg CONFIG_SYN_AXDSP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_AXDSP 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Fusion" } then { write_tristate $cfg $autocfg CONFIG_SYN_FUSION 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_FUSION 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Proasic" } then { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-ProasicPlus" } then { write_tristate $cfg $autocfg CONFIG_SYN_PROASICPLUS 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_PROASICPLUS 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Proasic3" } then { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Proasic3E" } then { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3E 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3E 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-Proasic3L" } then { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3L 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_PROASIC3L 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-IGLOO/p/L" } then { write_tristate $cfg $autocfg CONFIG_SYN_IGLOO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_IGLOO 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-IGLOO2" } then { write_tristate $cfg $autocfg CONFIG_SYN_IGLOO2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_IGLOO2 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-SmartFusion2" } then { write_tristate $cfg $autocfg CONFIG_SYN_SF2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SF2 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-RTG4" } then { write_tristate $cfg $autocfg CONFIG_SYN_RTG4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_RTG4 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Actel-PolarFire" } then { write_tristate $cfg $autocfg CONFIG_SYN_POLARFIRE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_POLARFIRE 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Aeroflex-UT025CRH" } then { write_tristate $cfg $autocfg CONFIG_SYN_UT025CRH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_UT025CRH 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Aeroflex-UT130HBD" } then { write_tristate $cfg $autocfg CONFIG_SYN_UT130HBD 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_UT130HBD 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Aeroflex-UT90NHBD" } then { write_tristate $cfg $autocfg CONFIG_SYN_UT90NHBD 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_UT90NHBD 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-CycloneIII" } then { write_tristate $cfg $autocfg CONFIG_SYN_CYCLONEIII 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_CYCLONEIII 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-Stratix" } then { write_tristate $cfg $autocfg CONFIG_SYN_STRATIX 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_STRATIX 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-StratixII" } then { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXII 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXII 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-StratixIII" } then { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXIII 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXIII 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-StratixIV" } then { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXIV 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXIV 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-StratixV" } then { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXV 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_STRATIXV 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Altera-Others" } then { write_tristate $cfg $autocfg CONFIG_SYN_ALTERA 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ALTERA 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Atmel-ATC18" } then { write_tristate $cfg $autocfg CONFIG_SYN_ATC18 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ATC18 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Atmel-ATC18RHA" } then { write_tristate $cfg $autocfg CONFIG_SYN_ATC18RHA 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ATC18RHA 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Custom1" } then { write_tristate $cfg $autocfg CONFIG_SYN_CUSTOM1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_CUSTOM1 0 [list $notmod] 2 }
	if { $tmpvar_0 == "DARE" } then { write_tristate $cfg $autocfg CONFIG_SYN_DARE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_DARE 0 [list $notmod] 2 }
	if { $tmpvar_0 == "IBM-CMOS9SF" } then { write_tristate $cfg $autocfg CONFIG_SYN_CMOS9SF 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_CMOS9SF 0 [list $notmod] 2 }
	if { $tmpvar_0 == "NanoXplore-BraveMed" } then { write_tristate $cfg $autocfg CONFIG_SYN_BRAVEMED 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_BRAVEMED 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Quicklogic-Eclipse" } then { write_tristate $cfg $autocfg CONFIG_SYN_ECLIPSE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ECLIPSE 0 [list $notmod] 2 }
	if { $tmpvar_0 == "RH-LIB18T" } then { write_tristate $cfg $autocfg CONFIG_SYN_RH_LIB18T 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_RH_LIB18T 0 [list $notmod] 2 }
	if { $tmpvar_0 == "RH-UMC" } then { write_tristate $cfg $autocfg CONFIG_SYN_RHUMC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_RHUMC 0 [list $notmod] 2 }
	if { $tmpvar_0 == "RHS65" } then { write_tristate $cfg $autocfg CONFIG_SYN_RHS65 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_RHS65 0 [list $notmod] 2 }
	if { $tmpvar_0 == "SAED32" } then { write_tristate $cfg $autocfg CONFIG_SYN_SAED32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SAED32 0 [list $notmod] 2 }
	if { $tmpvar_0 == "SMIC130" } then { write_tristate $cfg $autocfg CONFIG_SYN_SMIC13 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SMIC13 0 [list $notmod] 2 }
	if { $tmpvar_0 == "TM65Gplus" } then { write_tristate $cfg $autocfg CONFIG_SYN_TM65GPLUS 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_TM65GPLUS 0 [list $notmod] 2 }
	if { $tmpvar_0 == "TSMC90" } then { write_tristate $cfg $autocfg CONFIG_SYN_TSMC90 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_TSMC90 0 [list $notmod] 2 }
	if { $tmpvar_0 == "UMC180" } then { write_tristate $cfg $autocfg CONFIG_SYN_UMC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_UMC 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Artix7" } then { write_tristate $cfg $autocfg CONFIG_SYN_ARTIX7 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ARTIX7 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Kintex7" } then { write_tristate $cfg $autocfg CONFIG_SYN_KINTEX7 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_KINTEX7 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-KintexUltra" } then { write_tristate $cfg $autocfg CONFIG_SYN_KINTEXU 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_KINTEXU 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Spartan3" } then { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN3 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN3 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Spartan3E" } then { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN3E 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN3E 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Spartan6" } then { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN6 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_SPARTAN6 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Virtex2" } then { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX2 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Virtex4" } then { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX4 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Virtex5" } then { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX5 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX5 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Virtex6" } then { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX6 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX6 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Virtex7" } then { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX7 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_VIRTEX7 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Xilinx-Zynq7000" } then { write_tristate $cfg $autocfg CONFIG_SYN_ZYNQ7000 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SYN_ZYNQ7000 0 [list $notmod] 2 }
	global tmpvar_1
	global CONFIG_SYN_INFERRED
	global CONFIG_SYN_CUSTOM1
	global CONFIG_SYN_ATC18
	global CONFIG_SYN_TSMC90
	global CONFIG_SYN_UMC
	global CONFIG_SYN_RHUMC
	global CONFIG_SYN_DARE
	global CONFIG_SYN_SAED32
	global CONFIG_SYN_RHS65
	global CONFIG_SYN_ARTISAN
	if {($CONFIG_SYN_INFERRED == 1 || $CONFIG_SYN_CUSTOM1 == 1 || $CONFIG_SYN_ATC18 == 1 || $CONFIG_SYN_TSMC90 == 1 || $CONFIG_SYN_UMC == 1 || $CONFIG_SYN_RHUMC == 1 || $CONFIG_SYN_DARE == 1 || $CONFIG_SYN_SAED32 == 1 || $CONFIG_SYN_RHS65 == 1 || $CONFIG_SYN_ARTISAN == 1)} then {
	if { $tmpvar_1 == "Inferred" } then { write_tristate $cfg $autocfg CONFIG_MEM_INFERRED 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_INFERRED 0 [list $notmod] 2 }
	if { $tmpvar_1 == "UMC18" } then { write_tristate $cfg $autocfg CONFIG_MEM_UMC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_UMC 0 [list $notmod] 2 }
	if { $tmpvar_1 == "RH-UMC" } then { write_tristate $cfg $autocfg CONFIG_MEM_RHUMC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_RHUMC 0 [list $notmod] 2 }
	if { $tmpvar_1 == "SAED32" } then { write_tristate $cfg $autocfg CONFIG_MEM_SAED32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_SAED32 0 [list $notmod] 2 }
	if { $tmpvar_1 == "DARE" } then { write_tristate $cfg $autocfg CONFIG_MEM_DARE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_DARE 0 [list $notmod] 2 }
	if { $tmpvar_1 == "RHS65" } then { write_tristate $cfg $autocfg CONFIG_MEM_RHS65 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_RHS65 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Artisan" } then { write_tristate $cfg $autocfg CONFIG_MEM_ARTISAN 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_ARTISAN 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Custom1" } then { write_tristate $cfg $autocfg CONFIG_MEM_CUSTOM1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_CUSTOM1 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Virage" } then { write_tristate $cfg $autocfg CONFIG_MEM_VIRAGE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_VIRAGE 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Virage-TSMC90" } then { write_tristate $cfg $autocfg CONFIG_MEM_VIRAGE90 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MEM_VIRAGE90 0 [list $notmod] 2 }}
	global tmpvar_2
	global CONFIG_SYN_VIRTEX5
	global CONFIG_SYN_VIRTEX6
	global CONFIG_SYN_VIRTEX7
	if {($CONFIG_SYN_VIRTEX5 == 1 || $CONFIG_SYN_VIRTEX6 == 1 || $CONFIG_SYN_VIRTEX7 == 1)} then {
	if { $tmpvar_2 == "GTP0" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTP0 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTP0 0 [list $notmod] 2 }
	if { $tmpvar_2 == "GTP1" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTP1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTP1 0 [list $notmod] 2 }
	if { $tmpvar_2 == "GTX0" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTX0 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTX0 0 [list $notmod] 2 }
	if { $tmpvar_2 == "GTX1" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTX1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTX1 0 [list $notmod] 2 }
	if { $tmpvar_2 == "GTH0" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTH0 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTH0 0 [list $notmod] 2 }
	if { $tmpvar_2 == "GTH1" } then { write_tristate $cfg $autocfg CONFIG_TRANS_GTH1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_TRANS_GTH1 0 [list $notmod] 2 }}
	global CONFIG_SYN_INFER_RAM
	if {($CONFIG_SYN_INFERRED != 1)} then {write_tristate $cfg $autocfg CONFIG_SYN_INFER_RAM $CONFIG_SYN_INFER_RAM [list $notmod] 2 }
	global CONFIG_SYN_INFER_PADS
	if {($CONFIG_SYN_INFERRED != 1)} then {write_tristate $cfg $autocfg CONFIG_SYN_INFER_PADS $CONFIG_SYN_INFER_PADS [list $notmod] 2 }
	global CONFIG_SYN_NO_ASYNC
	write_tristate $cfg $autocfg CONFIG_SYN_NO_ASYNC $CONFIG_SYN_NO_ASYNC [list $notmod] 2
	global CONFIG_SYN_SCAN
	write_tristate $cfg $autocfg CONFIG_SYN_SCAN $CONFIG_SYN_SCAN [list $notmod] 2
	write_comment $cfg $autocfg "Clock generation"
	global tmpvar_3
	
	if { $tmpvar_3 == "Inferred" } then { write_tristate $cfg $autocfg CONFIG_CLK_INFERRED 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_INFERRED 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Actel-HCLKBUF" } then { write_tristate $cfg $autocfg CONFIG_CLK_HCLKBUF 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_HCLKBUF 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Aeroflex-UT130HBD" } then { write_tristate $cfg $autocfg CONFIG_CLK_UT130HBD 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_UT130HBD 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Altera-ALTPLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_ALTDLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_ALTDLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "NanoXplore-NXPLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_BRAVEMED 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_BRAVEMED 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Proasic3-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_PRO3PLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_PRO3PLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Proasic3E-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_PRO3EPLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_PRO3EPLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Proasic3L-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_PRO3LPLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_PRO3LPLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Fusion-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_FUSPLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_FUSPLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "RH-LIB18T-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_LIB18T 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_LIB18T 0 [list $notmod] 2 }
	if { $tmpvar_3 == "RHUMC-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_RHUMC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_RHUMC 0 [list $notmod] 2 }
	if { $tmpvar_3 == "DARE-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_DARE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_DARE 0 [list $notmod] 2 }
	if { $tmpvar_3 == "SAED32-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_SAED32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_SAED32 0 [list $notmod] 2 }
	if { $tmpvar_3 == "EASIC45-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_EASIC45 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_EASIC45 0 [list $notmod] 2 }
	if { $tmpvar_3 == "RHS65-PLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_RHS65 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_RHS65 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Xilinx-PLLE2" } then { write_tristate $cfg $autocfg CONFIG_CLK_CLKPLLE2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_CLKPLLE2 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Xilinx-CLKDLL" } then { write_tristate $cfg $autocfg CONFIG_CLK_CLKDLL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_CLKDLL 0 [list $notmod] 2 }
	if { $tmpvar_3 == "Xilinx-DCM" } then { write_tristate $cfg $autocfg CONFIG_CLK_DCM 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLK_DCM 0 [list $notmod] 2 }
	global CONFIG_CLK_MUL
	global CONFIG_CLK_DCM
	global CONFIG_CLK_ALTDLL
	global CONFIG_CLK_LATDLL
	global CONFIG_CLK_PRO3PLL
	global CONFIG_CLK_PRO3EPLL
	global CONFIG_CLK_PRO3LPLL
	global CONFIG_CLK_CLKDLL
	global CONFIG_CLK_LIB18T
	global CONFIG_CLK_FUSPLL
	global CONFIG_CLK_CLKPLLE2
	global CONFIG_CLK_BRAVEMED
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {write_int $cfg $autocfg CONFIG_CLK_MUL $CONFIG_CLK_MUL $notmod }
	global CONFIG_CLK_DIV
	if {($CONFIG_CLK_DCM == 1 || $CONFIG_CLK_ALTDLL == 1 || $CONFIG_CLK_LATDLL == 1 || $CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_LIB18T == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_CLKPLLE2 == 1 || $CONFIG_CLK_BRAVEMED == 1) && ($CONFIG_CLK_BRAVEMED != 1)} then {write_int $cfg $autocfg CONFIG_CLK_DIV $CONFIG_CLK_DIV $notmod }
	global CONFIG_OCLK_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {write_int $cfg $autocfg CONFIG_OCLK_DIV $CONFIG_OCLK_DIV $notmod }
	global CONFIG_OCLKB_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {write_int $cfg $autocfg CONFIG_OCLKB_DIV $CONFIG_OCLKB_DIV $notmod }
	global CONFIG_OCLKC_DIV
	if {($CONFIG_CLK_PRO3PLL == 1 || $CONFIG_CLK_PRO3EPLL == 1 || $CONFIG_CLK_PRO3LPLL == 1 || $CONFIG_CLK_FUSPLL == 1 || $CONFIG_CLK_BRAVEMED == 1)} then {write_int $cfg $autocfg CONFIG_OCLKC_DIV $CONFIG_OCLKC_DIV $notmod }
	global CONFIG_PCI_CLKDLL
	if {($CONFIG_CLK_CLKDLL == 1 || $CONFIG_CLK_DCM == 1)} then {write_tristate $cfg $autocfg CONFIG_PCI_CLKDLL $CONFIG_PCI_CLKDLL [list $notmod] 2 }
	global CONFIG_CLK_NOFB
	if {($CONFIG_CLK_DCM == 1)} then {write_tristate $cfg $autocfg CONFIG_CLK_NOFB $CONFIG_CLK_NOFB [list $notmod] 2 }
	global CONFIG_PCI_SYSCLK
	global CONFIG_PCI_ENABLE
	if {($CONFIG_PCI_ENABLE != 1)} then {write_tristate $cfg $autocfg CONFIG_PCI_SYSCLK $CONFIG_PCI_SYSCLK [list $notmod] 2 }
	write_comment $cfg $autocfg "Processor            "
	global CONFIG_NOELV
	write_tristate $cfg $autocfg CONFIG_NOELV $CONFIG_NOELV [list $notmod] 2
	global CONFIG_PROC_NUM
	if {($CONFIG_NOELV == 1)} then {write_int $cfg $autocfg CONFIG_PROC_NUM $CONFIG_PROC_NUM $notmod }
	global tmpvar_4
	if {($CONFIG_NOELV == 1)} then {
	if { $tmpvar_4 == "RV64" } then { write_tristate $cfg $autocfg CONFIG_NOELV_RV64 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_RV64 0 [list $notmod] 2 }
	if { $tmpvar_4 == "RV32" } then { write_tristate $cfg $autocfg CONFIG_NOELV_RV32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_RV32 0 [list $notmod] 2 }}
	global CONFIG_NOELV_XLEN
	global CONFIG_NOELV_RV32
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_RV32 == 1)} then {write_int $cfg $autocfg CONFIG_NOELV_XLEN 32 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_RV32 != 1)} then {write_int $cfg $autocfg CONFIG_NOELV_XLEN 64 $notmod }
	global tmpvar_5
	if {($CONFIG_NOELV == 1)} then {
	if { $tmpvar_5 == "High-Performance" } then { write_tristate $cfg $autocfg CONFIG_NOELV_HP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_HP 0 [list $notmod] 2 }
	if { $tmpvar_5 == "General-purpose" } then { write_tristate $cfg $autocfg CONFIG_NOELV_GP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_GP 0 [list $notmod] 2 }
	if { $tmpvar_5 == "Minimal-configuration" } then { write_tristate $cfg $autocfg CONFIG_NOELV_MC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_MC 0 [list $notmod] 2 }}
	global tmpvar_6
	global CONFIG_NOELV_GP
	global CONFIG_NOELV_MC
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1 || $CONFIG_NOELV_MC == 1)} then {
	if { $tmpvar_6 == "Full" } then { write_tristate $cfg $autocfg CONFIG_NOELV_FULL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_FULL 0 [list $notmod] 2 }
	if { $tmpvar_6 == "Lite" } then { write_tristate $cfg $autocfg CONFIG_NOELV_LITE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_LITE 0 [list $notmod] 2 }}
	global tmpvar_7
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {
	if { $tmpvar_7 == "Dual-issue" } then { write_tristate $cfg $autocfg CONFIG_NOELV_DISSUE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_DISSUE 0 [list $notmod] 2 }
	if { $tmpvar_7 == "Single-issue" } then { write_tristate $cfg $autocfg CONFIG_NOELV_SISSUE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_SISSUE 0 [list $notmod] 2 }}
	global tmpvar_8
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {
	if { $tmpvar_8 == "FPU-enable" } then { write_tristate $cfg $autocfg CONFIG_NOELV_FPU 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_FPU 0 [list $notmod] 2 }
	if { $tmpvar_8 == "FPU-disable" } then { write_tristate $cfg $autocfg CONFIG_NOELV_NOFPU 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOELV_NOFPU 0 [list $notmod] 2 }}
	global CONFIG_PROC_TYP
	global CONFIG_NOELV_HP
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_TYP 4 $notmod }
	global CONFIG_PROC_LITE
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_LITE 0 $notmod }
	global CONFIG_PROC_NOFPU
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_NOFPU 0 $notmod }
	global CONFIG_PROC_S
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_HP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_S 0 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_TYP 3 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1)} then {write_int $cfg $autocfg CONFIG_PROC_NOFPU 0 $notmod }
	global CONFIG_NOELV_LITE
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_LITE == 1)} then {write_int $cfg $autocfg CONFIG_PROC_LITE 1 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_LITE != 1)} then {write_int $cfg $autocfg CONFIG_PROC_LITE 0 $notmod }
	global CONFIG_NOELV_SISSUE
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_SISSUE == 1)} then {write_int $cfg $autocfg CONFIG_PROC_S 1 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_GP == 1) && ($CONFIG_NOELV_SISSUE != 1)} then {write_int $cfg $autocfg CONFIG_PROC_S 0 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {write_int $cfg $autocfg CONFIG_PROC_TYP 2 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1)} then {write_int $cfg $autocfg CONFIG_PROC_S 1 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_LITE == 1)} then {write_int $cfg $autocfg CONFIG_PROC_LITE 1 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_LITE != 1)} then {write_int $cfg $autocfg CONFIG_PROC_LITE 0 $notmod }
	global CONFIG_NOELV_FPU
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_FPU == 1)} then {write_int $cfg $autocfg CONFIG_PROC_NOFPU 0 $notmod }
	if {($CONFIG_NOELV == 1) && ($CONFIG_NOELV_MC == 1) && ($CONFIG_NOELV_FPU != 1)} then {write_int $cfg $autocfg CONFIG_PROC_NOFPU 1 $notmod }
	if {($CONFIG_NOELV == 1)} then {write_comment $cfg $autocfg "VHDL debug settings       "}
	global CONFIG_IU_DISAS
	if {($CONFIG_NOELV == 1)} then {write_tristate $cfg $autocfg CONFIG_IU_DISAS $CONFIG_IU_DISAS [list $notmod] 2 }
	if {($CONFIG_NOELV == 1)} then {write_comment $cfg $autocfg "NOEL-V subsystem GPL settings       "}
	global CONFIG_PROC_NODBUS
	if {($CONFIG_NOELV == 1)} then {write_tristate $cfg $autocfg CONFIG_PROC_NODBUS $CONFIG_PROC_NODBUS [list $notmod] 2 }
	write_comment $cfg $autocfg "L2 Cache"
	global CONFIG_L2_ENABLE
	write_tristate $cfg $autocfg CONFIG_L2_ENABLE $CONFIG_L2_ENABLE [list $notmod] 2
	global tmpvar_9
	
	if { $tmpvar_9 == "1" } then { write_tristate $cfg $autocfg CONFIG_L2_ASSO1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_ASSO1 0 [list $notmod] 2 }
	if { $tmpvar_9 == "2" } then { write_tristate $cfg $autocfg CONFIG_L2_ASSO2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_ASSO2 0 [list $notmod] 2 }
	if { $tmpvar_9 == "3" } then { write_tristate $cfg $autocfg CONFIG_L2_ASSO3 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_ASSO3 0 [list $notmod] 2 }
	if { $tmpvar_9 == "4" } then { write_tristate $cfg $autocfg CONFIG_L2_ASSO4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_ASSO4 0 [list $notmod] 2 }
	global tmpvar_10
	
	if { $tmpvar_10 == "1" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ1 0 [list $notmod] 2 }
	if { $tmpvar_10 == "2" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ2 0 [list $notmod] 2 }
	if { $tmpvar_10 == "4" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ4 0 [list $notmod] 2 }
	if { $tmpvar_10 == "8" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ8 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ8 0 [list $notmod] 2 }
	if { $tmpvar_10 == "16" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ16 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ16 0 [list $notmod] 2 }
	if { $tmpvar_10 == "32" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ32 0 [list $notmod] 2 }
	if { $tmpvar_10 == "64" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ64 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ64 0 [list $notmod] 2 }
	if { $tmpvar_10 == "128" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ128 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ128 0 [list $notmod] 2 }
	if { $tmpvar_10 == "256" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ256 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ256 0 [list $notmod] 2 }
	if { $tmpvar_10 == "512" } then { write_tristate $cfg $autocfg CONFIG_L2_SZ512 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_SZ512 0 [list $notmod] 2 }
	global tmpvar_11
	
	if { $tmpvar_11 == "32" } then { write_tristate $cfg $autocfg CONFIG_L2_LINE32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_LINE32 0 [list $notmod] 2 }
	if { $tmpvar_11 == "64" } then { write_tristate $cfg $autocfg CONFIG_L2_LINE64 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_LINE64 0 [list $notmod] 2 }
	global CONFIG_L2_HPROT
	write_tristate $cfg $autocfg CONFIG_L2_HPROT $CONFIG_L2_HPROT [list $notmod] 2
	global CONFIG_L2_PEN
	write_tristate $cfg $autocfg CONFIG_L2_PEN $CONFIG_L2_PEN [list $notmod] 2
	global CONFIG_L2_WT
	write_tristate $cfg $autocfg CONFIG_L2_WT $CONFIG_L2_WT [list $notmod] 2
	global CONFIG_L2_RAN
	write_tristate $cfg $autocfg CONFIG_L2_RAN $CONFIG_L2_RAN [list $notmod] 2
	global CONFIG_L2_SHARE
	global CONFIG_L2_ASSO1
	if {($CONFIG_L2_ASSO1 != "1")} then {write_tristate $cfg $autocfg CONFIG_L2_SHARE $CONFIG_L2_SHARE [list $notmod] 2 }
	global CONFIG_L2_MAP
	write_hex $cfg $autocfg CONFIG_L2_MAP $CONFIG_L2_MAP $notmod
	global CONFIG_L2_MTRR
	write_int $cfg $autocfg CONFIG_L2_MTRR $CONFIG_L2_MTRR $notmod
	global tmpvar_12
	
	if { $tmpvar_12 == "None" } then { write_tristate $cfg $autocfg CONFIG_L2_EDAC_NONE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_EDAC_NONE 0 [list $notmod] 2 }
	if { $tmpvar_12 == "Yes" } then { write_tristate $cfg $autocfg CONFIG_L2_EDAC_YES 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_EDAC_YES 0 [list $notmod] 2 }
	if { $tmpvar_12 == "TechSpec" } then { write_tristate $cfg $autocfg CONFIG_L2_EDAC_TECHSPEC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_L2_EDAC_TECHSPEC 0 [list $notmod] 2 }
	global CONFIG_L2_AXI
	write_tristate $cfg $autocfg CONFIG_L2_AXI $CONFIG_L2_AXI [list $notmod] 2
	write_comment $cfg $autocfg "AMBA configuration"
	global CONFIG_AHB_DEFMST
	write_int $cfg $autocfg CONFIG_AHB_DEFMST $CONFIG_AHB_DEFMST $notmod
	global CONFIG_AHB_RROBIN
	write_tristate $cfg $autocfg CONFIG_AHB_RROBIN $CONFIG_AHB_RROBIN [list $notmod] 2
	global CONFIG_AHB_SPLIT
	write_tristate $cfg $autocfg CONFIG_AHB_SPLIT $CONFIG_AHB_SPLIT [list $notmod] 2
	global CONFIG_AHB_FPNPEN
	write_tristate $cfg $autocfg CONFIG_AHB_FPNPEN $CONFIG_AHB_FPNPEN [list $notmod] 2
	global CONFIG_AHB_IOADDR
	write_hex $cfg $autocfg CONFIG_AHB_IOADDR $CONFIG_AHB_IOADDR $notmod
	global CONFIG_APB_HADDR
	write_hex $cfg $autocfg CONFIG_APB_HADDR $CONFIG_APB_HADDR $notmod
	global CONFIG_AHB_MON
	write_tristate $cfg $autocfg CONFIG_AHB_MON $CONFIG_AHB_MON [list $notmod] 2
	global CONFIG_AHB_MONERR
	if {($CONFIG_AHB_MON == 1)} then {write_tristate $cfg $autocfg CONFIG_AHB_MONERR $CONFIG_AHB_MONERR [list $notmod] 2 }
	global CONFIG_AHB_MONWAR
	if {($CONFIG_AHB_MON == 1)} then {write_tristate $cfg $autocfg CONFIG_AHB_MONWAR $CONFIG_AHB_MONWAR [list $notmod] 2 }
	global CONFIG_AHB_DTRACE
	write_tristate $cfg $autocfg CONFIG_AHB_DTRACE $CONFIG_AHB_DTRACE [list $notmod] 2
	write_comment $cfg $autocfg "Debug Link           "
	global CONFIG_DSU_UART
	write_tristate $cfg $autocfg CONFIG_DSU_UART $CONFIG_DSU_UART [list $notmod] 2
	global CONFIG_DSU_JTAG
	write_tristate $cfg $autocfg CONFIG_DSU_JTAG $CONFIG_DSU_JTAG [list $notmod] 2
	global CONFIG_DSU_ETH
	global CONFIG_GRETH_ENABLE
	if {($CONFIG_GRETH_ENABLE == 1)} then {write_tristate $cfg $autocfg CONFIG_DSU_ETH $CONFIG_DSU_ETH [list $notmod] 2 }
	global tmpvar_13
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {
	if { $tmpvar_13 == "1" } then { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ1 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ1 0 [list $notmod] 2 }
	if { $tmpvar_13 == "2" } then { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ2 0 [list $notmod] 2 }
	if { $tmpvar_13 == "4" } then { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ4 0 [list $notmod] 2 }
	if { $tmpvar_13 == "8" } then { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ8 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ8 0 [list $notmod] 2 }
	if { $tmpvar_13 == "16" } then { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ16 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_DSU_ETHSZ16 0 [list $notmod] 2 }}
	global CONFIG_DSU_IPMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {write_hex $cfg $autocfg CONFIG_DSU_IPMSB $CONFIG_DSU_IPMSB $notmod }
	global CONFIG_DSU_IPLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {write_hex $cfg $autocfg CONFIG_DSU_IPLSB $CONFIG_DSU_IPLSB $notmod }
	global CONFIG_DSU_ETHMSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {write_hex $cfg $autocfg CONFIG_DSU_ETHMSB $CONFIG_DSU_ETHMSB $notmod }
	global CONFIG_DSU_ETHLSB
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {write_hex $cfg $autocfg CONFIG_DSU_ETHLSB $CONFIG_DSU_ETHLSB $notmod }
	global CONFIG_DSU_ETH_PROG
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1)} then {write_tristate $cfg $autocfg CONFIG_DSU_ETH_PROG $CONFIG_DSU_ETH_PROG [list $notmod] 2 }
	global CONFIG_DSU_ETH_DIS
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_DSU_ETH == 1) && ($CONFIG_DSU_ETH_PROG == 1)} then {write_tristate $cfg $autocfg CONFIG_DSU_ETH_DIS $CONFIG_DSU_ETH_DIS [list $notmod] 2 }
	write_comment $cfg $autocfg "Peripherals             "
	write_comment $cfg $autocfg "Memory controller             "
	write_comment $cfg $autocfg "MIG 7-Series memory controller   "
	global CONFIG_MIG_7SERIES
	write_tristate $cfg $autocfg CONFIG_MIG_7SERIES $CONFIG_MIG_7SERIES [list $notmod] 2
	global CONFIG_MIG_7SERIES_MODEL
	write_tristate $cfg $autocfg CONFIG_MIG_7SERIES_MODEL $CONFIG_MIG_7SERIES_MODEL [list $notmod] 2
	global CONFIG_AHBSTAT_ENABLE
	write_tristate $cfg $autocfg CONFIG_AHBSTAT_ENABLE $CONFIG_AHBSTAT_ENABLE [list $notmod] 2
	global CONFIG_AHBSTAT_NFTSLV
	if {($CONFIG_AHBSTAT_ENABLE == 1)} then {write_int $cfg $autocfg CONFIG_AHBSTAT_NFTSLV $CONFIG_AHBSTAT_NFTSLV $notmod }
	write_comment $cfg $autocfg "Ethernet             "
	write_tristate $cfg $autocfg CONFIG_GRETH_ENABLE $CONFIG_GRETH_ENABLE [list $notmod] 2
	global CONFIG_GRETH_GIGA
	if {($CONFIG_GRETH_ENABLE == 1)} then {write_tristate $cfg $autocfg CONFIG_GRETH_GIGA $CONFIG_GRETH_GIGA [list $notmod] 2 }
	global tmpvar_14
	if {($CONFIG_GRETH_ENABLE == 1) && ($CONFIG_GRETH_GIGA == 0)} then {
	if { $tmpvar_14 == "4" } then { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO4 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO4 0 [list $notmod] 2 }
	if { $tmpvar_14 == "8" } then { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO8 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO8 0 [list $notmod] 2 }
	if { $tmpvar_14 == "16" } then { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO16 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO16 0 [list $notmod] 2 }
	if { $tmpvar_14 == "32" } then { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO32 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO32 0 [list $notmod] 2 }
	if { $tmpvar_14 == "64" } then { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO64 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_GRETH_FIFO64 0 [list $notmod] 2 }}
	global CONFIG_GRETH_FMC_MODE
	if {($CONFIG_GRETH_ENABLE == 1)} then {write_tristate $cfg $autocfg CONFIG_GRETH_FMC_MODE $CONFIG_GRETH_FMC_MODE [list $notmod] 2 }
	global CONFIG_GRETH_PHY_ADDR
	if {($CONFIG_GRETH_ENABLE == 1)} then {write_int $cfg $autocfg CONFIG_GRETH_PHY_ADDR $CONFIG_GRETH_PHY_ADDR $notmod }
	write_comment $cfg $autocfg "UARTs, timers and irq control         "
	global CONFIG_GRGPIO_ENABLE
	write_tristate $cfg $autocfg CONFIG_GRGPIO_ENABLE $CONFIG_GRGPIO_ENABLE [list $notmod] 2
	global CONFIG_GRGPIO_WIDTH
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {write_int $cfg $autocfg CONFIG_GRGPIO_WIDTH $CONFIG_GRGPIO_WIDTH $notmod }
	global CONFIG_GRGPIO_IMASK
	if {($CONFIG_GRGPIO_ENABLE == 1)} then {write_hex $cfg $autocfg CONFIG_GRGPIO_IMASK $CONFIG_GRGPIO_IMASK $notmod }
	write_comment $cfg $autocfg "VHDL Debugging        "
	global CONFIG_DEBUG_UART
	write_tristate $cfg $autocfg CONFIG_DEBUG_UART $CONFIG_DEBUG_UART [list $notmod] 2
	close $cfg
	close $autocfg
}


proc clear_choices { } {
	global CONFIG_SYN_INFERRED; set CONFIG_SYN_INFERRED 0
	global CONFIG_SYN_AXCEL; set CONFIG_SYN_AXCEL 0
	global CONFIG_SYN_AXDSP; set CONFIG_SYN_AXDSP 0
	global CONFIG_SYN_FUSION; set CONFIG_SYN_FUSION 0
	global CONFIG_SYN_PROASIC; set CONFIG_SYN_PROASIC 0
	global CONFIG_SYN_PROASICPLUS; set CONFIG_SYN_PROASICPLUS 0
	global CONFIG_SYN_PROASIC3; set CONFIG_SYN_PROASIC3 0
	global CONFIG_SYN_PROASIC3E; set CONFIG_SYN_PROASIC3E 0
	global CONFIG_SYN_PROASIC3L; set CONFIG_SYN_PROASIC3L 0
	global CONFIG_SYN_IGLOO; set CONFIG_SYN_IGLOO 0
	global CONFIG_SYN_IGLOO2; set CONFIG_SYN_IGLOO2 0
	global CONFIG_SYN_SF2; set CONFIG_SYN_SF2 0
	global CONFIG_SYN_RTG4; set CONFIG_SYN_RTG4 0
	global CONFIG_SYN_POLARFIRE; set CONFIG_SYN_POLARFIRE 0
	global CONFIG_SYN_UT025CRH; set CONFIG_SYN_UT025CRH 0
	global CONFIG_SYN_UT130HBD; set CONFIG_SYN_UT130HBD 0
	global CONFIG_SYN_UT90NHBD; set CONFIG_SYN_UT90NHBD 0
	global CONFIG_SYN_CYCLONEIII; set CONFIG_SYN_CYCLONEIII 0
	global CONFIG_SYN_STRATIX; set CONFIG_SYN_STRATIX 0
	global CONFIG_SYN_STRATIXII; set CONFIG_SYN_STRATIXII 0
	global CONFIG_SYN_STRATIXIII; set CONFIG_SYN_STRATIXIII 0
	global CONFIG_SYN_STRATIXIV; set CONFIG_SYN_STRATIXIV 0
	global CONFIG_SYN_STRATIXV; set CONFIG_SYN_STRATIXV 0
	global CONFIG_SYN_ALTERA; set CONFIG_SYN_ALTERA 0
	global CONFIG_SYN_ATC18; set CONFIG_SYN_ATC18 0
	global CONFIG_SYN_ATC18RHA; set CONFIG_SYN_ATC18RHA 0
	global CONFIG_SYN_CUSTOM1; set CONFIG_SYN_CUSTOM1 0
	global CONFIG_SYN_DARE; set CONFIG_SYN_DARE 0
	global CONFIG_SYN_CMOS9SF; set CONFIG_SYN_CMOS9SF 0
	global CONFIG_SYN_BRAVEMED; set CONFIG_SYN_BRAVEMED 0
	global CONFIG_SYN_ECLIPSE; set CONFIG_SYN_ECLIPSE 0
	global CONFIG_SYN_RH_LIB18T; set CONFIG_SYN_RH_LIB18T 0
	global CONFIG_SYN_RHUMC; set CONFIG_SYN_RHUMC 0
	global CONFIG_SYN_RHS65; set CONFIG_SYN_RHS65 0
	global CONFIG_SYN_SAED32; set CONFIG_SYN_SAED32 0
	global CONFIG_SYN_SMIC13; set CONFIG_SYN_SMIC13 0
	global CONFIG_SYN_TM65GPLUS; set CONFIG_SYN_TM65GPLUS 0
	global CONFIG_SYN_TSMC90; set CONFIG_SYN_TSMC90 0
	global CONFIG_SYN_UMC; set CONFIG_SYN_UMC 0
	global CONFIG_SYN_ARTIX7; set CONFIG_SYN_ARTIX7 0
	global CONFIG_SYN_KINTEX7; set CONFIG_SYN_KINTEX7 0
	global CONFIG_SYN_KINTEXU; set CONFIG_SYN_KINTEXU 0
	global CONFIG_SYN_SPARTAN3; set CONFIG_SYN_SPARTAN3 0
	global CONFIG_SYN_SPARTAN3E; set CONFIG_SYN_SPARTAN3E 0
	global CONFIG_SYN_SPARTAN6; set CONFIG_SYN_SPARTAN6 0
	global CONFIG_SYN_VIRTEX2; set CONFIG_SYN_VIRTEX2 0
	global CONFIG_SYN_VIRTEX4; set CONFIG_SYN_VIRTEX4 0
	global CONFIG_SYN_VIRTEX5; set CONFIG_SYN_VIRTEX5 0
	global CONFIG_SYN_VIRTEX6; set CONFIG_SYN_VIRTEX6 0
	global CONFIG_SYN_VIRTEX7; set CONFIG_SYN_VIRTEX7 0
	global CONFIG_SYN_ZYNQ7000; set CONFIG_SYN_ZYNQ7000 0
	global CONFIG_MEM_INFERRED; set CONFIG_MEM_INFERRED 0
	global CONFIG_MEM_UMC; set CONFIG_MEM_UMC 0
	global CONFIG_MEM_RHUMC; set CONFIG_MEM_RHUMC 0
	global CONFIG_MEM_SAED32; set CONFIG_MEM_SAED32 0
	global CONFIG_MEM_DARE; set CONFIG_MEM_DARE 0
	global CONFIG_MEM_RHS65; set CONFIG_MEM_RHS65 0
	global CONFIG_MEM_ARTISAN; set CONFIG_MEM_ARTISAN 0
	global CONFIG_MEM_CUSTOM1; set CONFIG_MEM_CUSTOM1 0
	global CONFIG_MEM_VIRAGE; set CONFIG_MEM_VIRAGE 0
	global CONFIG_MEM_VIRAGE90; set CONFIG_MEM_VIRAGE90 0
	global CONFIG_TRANS_GTP0; set CONFIG_TRANS_GTP0 0
	global CONFIG_TRANS_GTP1; set CONFIG_TRANS_GTP1 0
	global CONFIG_TRANS_GTX0; set CONFIG_TRANS_GTX0 0
	global CONFIG_TRANS_GTX1; set CONFIG_TRANS_GTX1 0
	global CONFIG_TRANS_GTH0; set CONFIG_TRANS_GTH0 0
	global CONFIG_TRANS_GTH1; set CONFIG_TRANS_GTH1 0
	global CONFIG_CLK_INFERRED; set CONFIG_CLK_INFERRED 0
	global CONFIG_CLK_HCLKBUF; set CONFIG_CLK_HCLKBUF 0
	global CONFIG_CLK_UT130HBD; set CONFIG_CLK_UT130HBD 0
	global CONFIG_CLK_ALTDLL; set CONFIG_CLK_ALTDLL 0
	global CONFIG_CLK_BRAVEMED; set CONFIG_CLK_BRAVEMED 0
	global CONFIG_CLK_PRO3PLL; set CONFIG_CLK_PRO3PLL 0
	global CONFIG_CLK_PRO3EPLL; set CONFIG_CLK_PRO3EPLL 0
	global CONFIG_CLK_PRO3LPLL; set CONFIG_CLK_PRO3LPLL 0
	global CONFIG_CLK_FUSPLL; set CONFIG_CLK_FUSPLL 0
	global CONFIG_CLK_LIB18T; set CONFIG_CLK_LIB18T 0
	global CONFIG_CLK_RHUMC; set CONFIG_CLK_RHUMC 0
	global CONFIG_CLK_DARE; set CONFIG_CLK_DARE 0
	global CONFIG_CLK_SAED32; set CONFIG_CLK_SAED32 0
	global CONFIG_CLK_EASIC45; set CONFIG_CLK_EASIC45 0
	global CONFIG_CLK_RHS65; set CONFIG_CLK_RHS65 0
	global CONFIG_CLK_CLKPLLE2; set CONFIG_CLK_CLKPLLE2 0
	global CONFIG_CLK_CLKDLL; set CONFIG_CLK_CLKDLL 0
	global CONFIG_CLK_DCM; set CONFIG_CLK_DCM 0
	global CONFIG_NOELV_RV64; set CONFIG_NOELV_RV64 0
	global CONFIG_NOELV_RV32; set CONFIG_NOELV_RV32 0
	global CONFIG_NOELV_HP; set CONFIG_NOELV_HP 0
	global CONFIG_NOELV_GP; set CONFIG_NOELV_GP 0
	global CONFIG_NOELV_MC; set CONFIG_NOELV_MC 0
	global CONFIG_NOELV_FULL; set CONFIG_NOELV_FULL 0
	global CONFIG_NOELV_LITE; set CONFIG_NOELV_LITE 0
	global CONFIG_NOELV_DISSUE; set CONFIG_NOELV_DISSUE 0
	global CONFIG_NOELV_SISSUE; set CONFIG_NOELV_SISSUE 0
	global CONFIG_NOELV_FPU; set CONFIG_NOELV_FPU 0
	global CONFIG_NOELV_NOFPU; set CONFIG_NOELV_NOFPU 0
	global CONFIG_L2_ASSO1; set CONFIG_L2_ASSO1 0
	global CONFIG_L2_ASSO2; set CONFIG_L2_ASSO2 0
	global CONFIG_L2_ASSO3; set CONFIG_L2_ASSO3 0
	global CONFIG_L2_ASSO4; set CONFIG_L2_ASSO4 0
	global CONFIG_L2_SZ1; set CONFIG_L2_SZ1 0
	global CONFIG_L2_SZ2; set CONFIG_L2_SZ2 0
	global CONFIG_L2_SZ4; set CONFIG_L2_SZ4 0
	global CONFIG_L2_SZ8; set CONFIG_L2_SZ8 0
	global CONFIG_L2_SZ16; set CONFIG_L2_SZ16 0
	global CONFIG_L2_SZ32; set CONFIG_L2_SZ32 0
	global CONFIG_L2_SZ64; set CONFIG_L2_SZ64 0
	global CONFIG_L2_SZ128; set CONFIG_L2_SZ128 0
	global CONFIG_L2_SZ256; set CONFIG_L2_SZ256 0
	global CONFIG_L2_SZ512; set CONFIG_L2_SZ512 0
	global CONFIG_L2_LINE32; set CONFIG_L2_LINE32 0
	global CONFIG_L2_LINE64; set CONFIG_L2_LINE64 0
	global CONFIG_L2_EDAC_NONE; set CONFIG_L2_EDAC_NONE 0
	global CONFIG_L2_EDAC_YES; set CONFIG_L2_EDAC_YES 0
	global CONFIG_L2_EDAC_TECHSPEC; set CONFIG_L2_EDAC_TECHSPEC 0
	global CONFIG_DSU_ETHSZ1; set CONFIG_DSU_ETHSZ1 0
	global CONFIG_DSU_ETHSZ2; set CONFIG_DSU_ETHSZ2 0
	global CONFIG_DSU_ETHSZ4; set CONFIG_DSU_ETHSZ4 0
	global CONFIG_DSU_ETHSZ8; set CONFIG_DSU_ETHSZ8 0
	global CONFIG_DSU_ETHSZ16; set CONFIG_DSU_ETHSZ16 0
	global CONFIG_GRETH_FIFO4; set CONFIG_GRETH_FIFO4 0
	global CONFIG_GRETH_FIFO8; set CONFIG_GRETH_FIFO8 0
	global CONFIG_GRETH_FIFO16; set CONFIG_GRETH_FIFO16 0
	global CONFIG_GRETH_FIFO32; set CONFIG_GRETH_FIFO32 0
	global CONFIG_GRETH_FIFO64; set CONFIG_GRETH_FIFO64 0
}


proc update_choices { } {
	global tmpvar_0
	set tmpvar_0 "Inferred"
	global CONFIG_SYN_INFERRED
	if { $CONFIG_SYN_INFERRED == 1 } then { set tmpvar_0 "Inferred" }
	global CONFIG_SYN_AXCEL
	if { $CONFIG_SYN_AXCEL == 1 } then { set tmpvar_0 "Actel-Axcelerator" }
	global CONFIG_SYN_AXDSP
	if { $CONFIG_SYN_AXDSP == 1 } then { set tmpvar_0 "Actel-Axcelerator-DSP" }
	global CONFIG_SYN_FUSION
	if { $CONFIG_SYN_FUSION == 1 } then { set tmpvar_0 "Actel-Fusion" }
	global CONFIG_SYN_PROASIC
	if { $CONFIG_SYN_PROASIC == 1 } then { set tmpvar_0 "Actel-Proasic" }
	global CONFIG_SYN_PROASICPLUS
	if { $CONFIG_SYN_PROASICPLUS == 1 } then { set tmpvar_0 "Actel-ProasicPlus" }
	global CONFIG_SYN_PROASIC3
	if { $CONFIG_SYN_PROASIC3 == 1 } then { set tmpvar_0 "Actel-Proasic3" }
	global CONFIG_SYN_PROASIC3E
	if { $CONFIG_SYN_PROASIC3E == 1 } then { set tmpvar_0 "Actel-Proasic3E" }
	global CONFIG_SYN_PROASIC3L
	if { $CONFIG_SYN_PROASIC3L == 1 } then { set tmpvar_0 "Actel-Proasic3L" }
	global CONFIG_SYN_IGLOO
	if { $CONFIG_SYN_IGLOO == 1 } then { set tmpvar_0 "Actel-IGLOO/p/L" }
	global CONFIG_SYN_IGLOO2
	if { $CONFIG_SYN_IGLOO2 == 1 } then { set tmpvar_0 "Actel-IGLOO2" }
	global CONFIG_SYN_SF2
	if { $CONFIG_SYN_SF2 == 1 } then { set tmpvar_0 "Actel-SmartFusion2" }
	global CONFIG_SYN_RTG4
	if { $CONFIG_SYN_RTG4 == 1 } then { set tmpvar_0 "Actel-RTG4" }
	global CONFIG_SYN_POLARFIRE
	if { $CONFIG_SYN_POLARFIRE == 1 } then { set tmpvar_0 "Actel-PolarFire" }
	global CONFIG_SYN_UT025CRH
	if { $CONFIG_SYN_UT025CRH == 1 } then { set tmpvar_0 "Aeroflex-UT025CRH" }
	global CONFIG_SYN_UT130HBD
	if { $CONFIG_SYN_UT130HBD == 1 } then { set tmpvar_0 "Aeroflex-UT130HBD" }
	global CONFIG_SYN_UT90NHBD
	if { $CONFIG_SYN_UT90NHBD == 1 } then { set tmpvar_0 "Aeroflex-UT90NHBD" }
	global CONFIG_SYN_CYCLONEIII
	if { $CONFIG_SYN_CYCLONEIII == 1 } then { set tmpvar_0 "Altera-CycloneIII" }
	global CONFIG_SYN_STRATIX
	if { $CONFIG_SYN_STRATIX == 1 } then { set tmpvar_0 "Altera-Stratix" }
	global CONFIG_SYN_STRATIXII
	if { $CONFIG_SYN_STRATIXII == 1 } then { set tmpvar_0 "Altera-StratixII" }
	global CONFIG_SYN_STRATIXIII
	if { $CONFIG_SYN_STRATIXIII == 1 } then { set tmpvar_0 "Altera-StratixIII" }
	global CONFIG_SYN_STRATIXIV
	if { $CONFIG_SYN_STRATIXIV == 1 } then { set tmpvar_0 "Altera-StratixIV" }
	global CONFIG_SYN_STRATIXV
	if { $CONFIG_SYN_STRATIXV == 1 } then { set tmpvar_0 "Altera-StratixV" }
	global CONFIG_SYN_ALTERA
	if { $CONFIG_SYN_ALTERA == 1 } then { set tmpvar_0 "Altera-Others" }
	global CONFIG_SYN_ATC18
	if { $CONFIG_SYN_ATC18 == 1 } then { set tmpvar_0 "Atmel-ATC18" }
	global CONFIG_SYN_ATC18RHA
	if { $CONFIG_SYN_ATC18RHA == 1 } then { set tmpvar_0 "Atmel-ATC18RHA" }
	global CONFIG_SYN_CUSTOM1
	if { $CONFIG_SYN_CUSTOM1 == 1 } then { set tmpvar_0 "Custom1" }
	global CONFIG_SYN_DARE
	if { $CONFIG_SYN_DARE == 1 } then { set tmpvar_0 "DARE" }
	global CONFIG_SYN_CMOS9SF
	if { $CONFIG_SYN_CMOS9SF == 1 } then { set tmpvar_0 "IBM-CMOS9SF" }
	global CONFIG_SYN_BRAVEMED
	if { $CONFIG_SYN_BRAVEMED == 1 } then { set tmpvar_0 "NanoXplore-BraveMed" }
	global CONFIG_SYN_ECLIPSE
	if { $CONFIG_SYN_ECLIPSE == 1 } then { set tmpvar_0 "Quicklogic-Eclipse" }
	global CONFIG_SYN_RH_LIB18T
	if { $CONFIG_SYN_RH_LIB18T == 1 } then { set tmpvar_0 "RH-LIB18T" }
	global CONFIG_SYN_RHUMC
	if { $CONFIG_SYN_RHUMC == 1 } then { set tmpvar_0 "RH-UMC" }
	global CONFIG_SYN_RHS65
	if { $CONFIG_SYN_RHS65 == 1 } then { set tmpvar_0 "RHS65" }
	global CONFIG_SYN_SAED32
	if { $CONFIG_SYN_SAED32 == 1 } then { set tmpvar_0 "SAED32" }
	global CONFIG_SYN_SMIC13
	if { $CONFIG_SYN_SMIC13 == 1 } then { set tmpvar_0 "SMIC130" }
	global CONFIG_SYN_TM65GPLUS
	if { $CONFIG_SYN_TM65GPLUS == 1 } then { set tmpvar_0 "TM65Gplus" }
	global CONFIG_SYN_TSMC90
	if { $CONFIG_SYN_TSMC90 == 1 } then { set tmpvar_0 "TSMC90" }
	global CONFIG_SYN_UMC
	if { $CONFIG_SYN_UMC == 1 } then { set tmpvar_0 "UMC180" }
	global CONFIG_SYN_ARTIX7
	if { $CONFIG_SYN_ARTIX7 == 1 } then { set tmpvar_0 "Xilinx-Artix7" }
	global CONFIG_SYN_KINTEX7
	if { $CONFIG_SYN_KINTEX7 == 1 } then { set tmpvar_0 "Xilinx-Kintex7" }
	global CONFIG_SYN_KINTEXU
	if { $CONFIG_SYN_KINTEXU == 1 } then { set tmpvar_0 "Xilinx-KintexUltra" }
	global CONFIG_SYN_SPARTAN3
	if { $CONFIG_SYN_SPARTAN3 == 1 } then { set tmpvar_0 "Xilinx-Spartan3" }
	global CONFIG_SYN_SPARTAN3E
	if { $CONFIG_SYN_SPARTAN3E == 1 } then { set tmpvar_0 "Xilinx-Spartan3E" }
	global CONFIG_SYN_SPARTAN6
	if { $CONFIG_SYN_SPARTAN6 == 1 } then { set tmpvar_0 "Xilinx-Spartan6" }
	global CONFIG_SYN_VIRTEX2
	if { $CONFIG_SYN_VIRTEX2 == 1 } then { set tmpvar_0 "Xilinx-Virtex2" }
	global CONFIG_SYN_VIRTEX4
	if { $CONFIG_SYN_VIRTEX4 == 1 } then { set tmpvar_0 "Xilinx-Virtex4" }
	global CONFIG_SYN_VIRTEX5
	if { $CONFIG_SYN_VIRTEX5 == 1 } then { set tmpvar_0 "Xilinx-Virtex5" }
	global CONFIG_SYN_VIRTEX6
	if { $CONFIG_SYN_VIRTEX6 == 1 } then { set tmpvar_0 "Xilinx-Virtex6" }
	global CONFIG_SYN_VIRTEX7
	if { $CONFIG_SYN_VIRTEX7 == 1 } then { set tmpvar_0 "Xilinx-Virtex7" }
	global CONFIG_SYN_ZYNQ7000
	if { $CONFIG_SYN_ZYNQ7000 == 1 } then { set tmpvar_0 "Xilinx-Zynq7000" }
	global tmpvar_1
	set tmpvar_1 "Inferred"
	global CONFIG_MEM_INFERRED
	if { $CONFIG_MEM_INFERRED == 1 } then { set tmpvar_1 "Inferred" }
	global CONFIG_MEM_UMC
	if { $CONFIG_MEM_UMC == 1 } then { set tmpvar_1 "UMC18" }
	global CONFIG_MEM_RHUMC
	if { $CONFIG_MEM_RHUMC == 1 } then { set tmpvar_1 "RH-UMC" }
	global CONFIG_MEM_SAED32
	if { $CONFIG_MEM_SAED32 == 1 } then { set tmpvar_1 "SAED32" }
	global CONFIG_MEM_DARE
	if { $CONFIG_MEM_DARE == 1 } then { set tmpvar_1 "DARE" }
	global CONFIG_MEM_RHS65
	if { $CONFIG_MEM_RHS65 == 1 } then { set tmpvar_1 "RHS65" }
	global CONFIG_MEM_ARTISAN
	if { $CONFIG_MEM_ARTISAN == 1 } then { set tmpvar_1 "Artisan" }
	global CONFIG_MEM_CUSTOM1
	if { $CONFIG_MEM_CUSTOM1 == 1 } then { set tmpvar_1 "Custom1" }
	global CONFIG_MEM_VIRAGE
	if { $CONFIG_MEM_VIRAGE == 1 } then { set tmpvar_1 "Virage" }
	global CONFIG_MEM_VIRAGE90
	if { $CONFIG_MEM_VIRAGE90 == 1 } then { set tmpvar_1 "Virage-TSMC90" }
	global tmpvar_2
	set tmpvar_2 "GTP0"
	global CONFIG_TRANS_GTP0
	if { $CONFIG_TRANS_GTP0 == 1 } then { set tmpvar_2 "GTP0" }
	global CONFIG_TRANS_GTP1
	if { $CONFIG_TRANS_GTP1 == 1 } then { set tmpvar_2 "GTP1" }
	global CONFIG_TRANS_GTX0
	if { $CONFIG_TRANS_GTX0 == 1 } then { set tmpvar_2 "GTX0" }
	global CONFIG_TRANS_GTX1
	if { $CONFIG_TRANS_GTX1 == 1 } then { set tmpvar_2 "GTX1" }
	global CONFIG_TRANS_GTH0
	if { $CONFIG_TRANS_GTH0 == 1 } then { set tmpvar_2 "GTH0" }
	global CONFIG_TRANS_GTH1
	if { $CONFIG_TRANS_GTH1 == 1 } then { set tmpvar_2 "GTH1" }
	global tmpvar_3
	set tmpvar_3 "Inferred"
	global CONFIG_CLK_INFERRED
	if { $CONFIG_CLK_INFERRED == 1 } then { set tmpvar_3 "Inferred" }
	global CONFIG_CLK_HCLKBUF
	if { $CONFIG_CLK_HCLKBUF == 1 } then { set tmpvar_3 "Actel-HCLKBUF" }
	global CONFIG_CLK_UT130HBD
	if { $CONFIG_CLK_UT130HBD == 1 } then { set tmpvar_3 "Aeroflex-UT130HBD" }
	global CONFIG_CLK_ALTDLL
	if { $CONFIG_CLK_ALTDLL == 1 } then { set tmpvar_3 "Altera-ALTPLL" }
	global CONFIG_CLK_BRAVEMED
	if { $CONFIG_CLK_BRAVEMED == 1 } then { set tmpvar_3 "NanoXplore-NXPLL" }
	global CONFIG_CLK_PRO3PLL
	if { $CONFIG_CLK_PRO3PLL == 1 } then { set tmpvar_3 "Proasic3-PLL" }
	global CONFIG_CLK_PRO3EPLL
	if { $CONFIG_CLK_PRO3EPLL == 1 } then { set tmpvar_3 "Proasic3E-PLL" }
	global CONFIG_CLK_PRO3LPLL
	if { $CONFIG_CLK_PRO3LPLL == 1 } then { set tmpvar_3 "Proasic3L-PLL" }
	global CONFIG_CLK_FUSPLL
	if { $CONFIG_CLK_FUSPLL == 1 } then { set tmpvar_3 "Fusion-PLL" }
	global CONFIG_CLK_LIB18T
	if { $CONFIG_CLK_LIB18T == 1 } then { set tmpvar_3 "RH-LIB18T-PLL" }
	global CONFIG_CLK_RHUMC
	if { $CONFIG_CLK_RHUMC == 1 } then { set tmpvar_3 "RHUMC-PLL" }
	global CONFIG_CLK_DARE
	if { $CONFIG_CLK_DARE == 1 } then { set tmpvar_3 "DARE-PLL" }
	global CONFIG_CLK_SAED32
	if { $CONFIG_CLK_SAED32 == 1 } then { set tmpvar_3 "SAED32-PLL" }
	global CONFIG_CLK_EASIC45
	if { $CONFIG_CLK_EASIC45 == 1 } then { set tmpvar_3 "EASIC45-PLL" }
	global CONFIG_CLK_RHS65
	if { $CONFIG_CLK_RHS65 == 1 } then { set tmpvar_3 "RHS65-PLL" }
	global CONFIG_CLK_CLKPLLE2
	if { $CONFIG_CLK_CLKPLLE2 == 1 } then { set tmpvar_3 "Xilinx-PLLE2" }
	global CONFIG_CLK_CLKDLL
	if { $CONFIG_CLK_CLKDLL == 1 } then { set tmpvar_3 "Xilinx-CLKDLL" }
	global CONFIG_CLK_DCM
	if { $CONFIG_CLK_DCM == 1 } then { set tmpvar_3 "Xilinx-DCM" }
	global tmpvar_4
	set tmpvar_4 "XLEN"
	global CONFIG_NOELV_RV64
	if { $CONFIG_NOELV_RV64 == 1 } then { set tmpvar_4 "RV64" }
	global CONFIG_NOELV_RV32
	if { $CONFIG_NOELV_RV32 == 1 } then { set tmpvar_4 "RV32" }
	global tmpvar_5
	set tmpvar_5 "High-Performance"
	global CONFIG_NOELV_HP
	if { $CONFIG_NOELV_HP == 1 } then { set tmpvar_5 "High-Performance" }
	global CONFIG_NOELV_GP
	if { $CONFIG_NOELV_GP == 1 } then { set tmpvar_5 "General-purpose" }
	global CONFIG_NOELV_MC
	if { $CONFIG_NOELV_MC == 1 } then { set tmpvar_5 "Minimal-configuration" }
	global tmpvar_6
	set tmpvar_6 "Full"
	global CONFIG_NOELV_FULL
	if { $CONFIG_NOELV_FULL == 1 } then { set tmpvar_6 "Full" }
	global CONFIG_NOELV_LITE
	if { $CONFIG_NOELV_LITE == 1 } then { set tmpvar_6 "Lite" }
	global tmpvar_7
	set tmpvar_7 "Dual-issue"
	global CONFIG_NOELV_DISSUE
	if { $CONFIG_NOELV_DISSUE == 1 } then { set tmpvar_7 "Dual-issue" }
	global CONFIG_NOELV_SISSUE
	if { $CONFIG_NOELV_SISSUE == 1 } then { set tmpvar_7 "Single-issue" }
	global tmpvar_8
	set tmpvar_8 "FPU-enable"
	global CONFIG_NOELV_FPU
	if { $CONFIG_NOELV_FPU == 1 } then { set tmpvar_8 "FPU-enable" }
	global CONFIG_NOELV_NOFPU
	if { $CONFIG_NOELV_NOFPU == 1 } then { set tmpvar_8 "FPU-disable" }
	global tmpvar_9
	set tmpvar_9 "1"
	global CONFIG_L2_ASSO1
	if { $CONFIG_L2_ASSO1 == 1 } then { set tmpvar_9 "1" }
	global CONFIG_L2_ASSO2
	if { $CONFIG_L2_ASSO2 == 1 } then { set tmpvar_9 "2" }
	global CONFIG_L2_ASSO3
	if { $CONFIG_L2_ASSO3 == 1 } then { set tmpvar_9 "3" }
	global CONFIG_L2_ASSO4
	if { $CONFIG_L2_ASSO4 == 1 } then { set tmpvar_9 "4" }
	global tmpvar_10
	set tmpvar_10 "64"
	global CONFIG_L2_SZ1
	if { $CONFIG_L2_SZ1 == 1 } then { set tmpvar_10 "1" }
	global CONFIG_L2_SZ2
	if { $CONFIG_L2_SZ2 == 1 } then { set tmpvar_10 "2" }
	global CONFIG_L2_SZ4
	if { $CONFIG_L2_SZ4 == 1 } then { set tmpvar_10 "4" }
	global CONFIG_L2_SZ8
	if { $CONFIG_L2_SZ8 == 1 } then { set tmpvar_10 "8" }
	global CONFIG_L2_SZ16
	if { $CONFIG_L2_SZ16 == 1 } then { set tmpvar_10 "16" }
	global CONFIG_L2_SZ32
	if { $CONFIG_L2_SZ32 == 1 } then { set tmpvar_10 "32" }
	global CONFIG_L2_SZ64
	if { $CONFIG_L2_SZ64 == 1 } then { set tmpvar_10 "64" }
	global CONFIG_L2_SZ128
	if { $CONFIG_L2_SZ128 == 1 } then { set tmpvar_10 "128" }
	global CONFIG_L2_SZ256
	if { $CONFIG_L2_SZ256 == 1 } then { set tmpvar_10 "256" }
	global CONFIG_L2_SZ512
	if { $CONFIG_L2_SZ512 == 1 } then { set tmpvar_10 "512" }
	global tmpvar_11
	set tmpvar_11 "32"
	global CONFIG_L2_LINE32
	if { $CONFIG_L2_LINE32 == 1 } then { set tmpvar_11 "32" }
	global CONFIG_L2_LINE64
	if { $CONFIG_L2_LINE64 == 1 } then { set tmpvar_11 "64" }
	global tmpvar_12
	set tmpvar_12 "None"
	global CONFIG_L2_EDAC_NONE
	if { $CONFIG_L2_EDAC_NONE == 1 } then { set tmpvar_12 "None" }
	global CONFIG_L2_EDAC_YES
	if { $CONFIG_L2_EDAC_YES == 1 } then { set tmpvar_12 "Yes" }
	global CONFIG_L2_EDAC_TECHSPEC
	if { $CONFIG_L2_EDAC_TECHSPEC == 1 } then { set tmpvar_12 "TechSpec" }
	global tmpvar_13
	set tmpvar_13 "2"
	global CONFIG_DSU_ETHSZ1
	if { $CONFIG_DSU_ETHSZ1 == 1 } then { set tmpvar_13 "1" }
	global CONFIG_DSU_ETHSZ2
	if { $CONFIG_DSU_ETHSZ2 == 1 } then { set tmpvar_13 "2" }
	global CONFIG_DSU_ETHSZ4
	if { $CONFIG_DSU_ETHSZ4 == 1 } then { set tmpvar_13 "4" }
	global CONFIG_DSU_ETHSZ8
	if { $CONFIG_DSU_ETHSZ8 == 1 } then { set tmpvar_13 "8" }
	global CONFIG_DSU_ETHSZ16
	if { $CONFIG_DSU_ETHSZ16 == 1 } then { set tmpvar_13 "16" }
	global tmpvar_14
	set tmpvar_14 "8"
	global CONFIG_GRETH_FIFO4
	if { $CONFIG_GRETH_FIFO4 == 1 } then { set tmpvar_14 "4" }
	global CONFIG_GRETH_FIFO8
	if { $CONFIG_GRETH_FIFO8 == 1 } then { set tmpvar_14 "8" }
	global CONFIG_GRETH_FIFO16
	if { $CONFIG_GRETH_FIFO16 == 1 } then { set tmpvar_14 "16" }
	global CONFIG_GRETH_FIFO32
	if { $CONFIG_GRETH_FIFO32 == 1 } then { set tmpvar_14 "32" }
	global CONFIG_GRETH_FIFO64
	if { $CONFIG_GRETH_FIFO64 == 1 } then { set tmpvar_14 "64" }
}


proc update_define_mainmenu {} {
	global CONFIG_MODULES
	global CONFIG_HAS_SHARED_GRFPU
	global CONSTANT_Y
	set CONFIG_HAS_SHARED_GRFPU $CONSTANT_Y
}


# FILE: tail.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1998, Michael Elizabeth Chastain, <mec@shout.net>
# Arrange buttons in three columns for better screen fitting.
#

#
# Read the user's settings from .config.  These will override whatever is
# in config.in.  Don't do this if the user specified a -D to force
# the defaults.
#

set defaults defconfig

if { [file readable .config] == 1} then {
	if { $argc > 0 } then {
		if { [lindex $argv 0] != "-D" } then {
			read_config .config
			if { [lindex $argv 0] == "-regen" } then {
				catch {exec cp -f .config .config.old};
				writeconfig .config config.h
				exit 2
			}
		}
		else
		{
			read_config $defaults
		}
	} else {
		read_config .config
	}
} else {
	read_config $defaults
}

update_define 1 $total_menus 0
update_mainmenu

button .f0.right.save -anchor w -text "Save and Exit" -underline 0\
    -command { catch {exec cp -f .config .config.old}; \
		writeconfig .config config.h; wrapup .wrap }

button .f0.right.quit -anchor w -text "Quit Without Saving" -underline 0\
    -command { maybe_exit .maybe }

button .f0.right.load -anchor w -text "Load Configuration from File" \
    -command { load_configfile .load "Load Configuration from file" read_config_file
}

button .f0.right.store -anchor w -text "Store Configuration to File" \
    -command { load_configfile .load "Store Configuration to file" write_config_file }

#
# Now pack everything.
#

pack .f0.right.store .f0.right.load .f0.right.quit .f0.right.save \
    -padx 0 -pady 0 -side bottom -fill x
pack .f0.left .f0.middle .f0.right -side left -padx 5 -pady 0 -fill y
pack .f0 -padx 5 -pady 5

update idletasks
set winy [expr 10 + [winfo reqheight .f0]]
set scry [lindex [wm maxsize .] 1]
set winx [expr 10 + [winfo reqwidth .f0]]
set scrx [lindex [wm maxsize .] 0]
if {$winx < $scrx} then {set maxx -1} else {set maxx $winx}
if {$winy < $scry} then {set maxy -1} else {set maxy $winy}
.f0 configure -width $winx -height $winy 
wm maxsize . $maxx $maxy

#
# If we cannot write our config files, disable the write button.
#
if { [file exists .config] == 1 } then {
		if { [file writable .config] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable .] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

#if { [file exists include/linux/autoconf.h] == 1 } then {
#		if { [file writable include/linux/autoconf.h] == 0 } then {
#			.f0.right.save configure -state disabled
#		}
#	} else {
#		if { [file writable include/linux/] == 0 } then {
#			.f0.right.save configure -state disabled
#		}
#	}
